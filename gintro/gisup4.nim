const
  SCA = [
    "activate!gio.SimpleAction!1!(self: gio.SimpleAction; parameter: glib.Variant = nil)!(self: ptr gio.SimpleAction00; parameter: ptr glib.Variant00)",
    "change_state!gio.SimpleAction!1!(self: gio.SimpleAction; value: glib.Variant = nil)!(self: ptr gio.SimpleAction00; value: ptr glib.Variant00)",
    "command_line!gio.GApplication!1!(self: gio.GApplication; commandLine: gio.ApplicationCommandLine): int!(self: ptr gio.GApplication00; commandLine: ptr gio.ApplicationCommandLine00): int32",
    "handle_local_options!gio.GApplication!1!(self: gio.GApplication; options: glib.VariantDict): int!(self: ptr gio.GApplication00; options: ptr glib.VariantDict00): int32",
    "name_lost!gio.GApplication!0!(self: gio.GApplication): bool!(self: ptr gio.GApplication00): gboolean",
    "open!gio.GApplication!3!(self: gio.GApplication; files: GFile00Array; nFiles: int; hint: cstring)!(self: ptr gio.GApplication00; files: gio.GFile00Array; nFiles: int32; hint: cstring)",
    "action_added!gio.ActionGroup!1!(self: gio.ActionGroup; actionName: cstring)!(self: ptr gio.ActionGroup00; actionName: cstring)",
    "action_enabled_changed!gio.ActionGroup!2!(self: gio.ActionGroup; actionName: cstring; enabled: bool)!(self: ptr gio.ActionGroup00; actionName: cstring; enabled: gboolean)",
    "action_removed!gio.ActionGroup!1!(self: gio.ActionGroup; actionName: cstring)!(self: ptr gio.ActionGroup00; actionName: cstring)",
    "action_state_changed!gio.ActionGroup!2!(self: gio.ActionGroup; actionName: cstring; value: glib.Variant)!(self: ptr gio.ActionGroup00; actionName: cstring; value: ptr glib.Variant00)",
    "ask_password!gio.MountOperation!4!(self: gio.MountOperation; message: cstring; defaultUser: cstring; defaultDomain: cstring; flags: gio.AskPasswordFlags)!(self: ptr gio.MountOperation00; message: cstring; defaultUser: cstring; defaultDomain: cstring; flags: gio.AskPasswordFlags)",
    "ask_question!gio.MountOperation!2!(self: gio.MountOperation; message: cstring; choices: varargs[string, `$`])!(self: ptr gio.MountOperation00; message: cstring; choices: cstringArray)",
    "reply!gio.MountOperation!1!(self: gio.MountOperation; resu: gio.MountOperationResult)!(self: ptr gio.MountOperation00; resu: gio.MountOperationResult)",
    "show_processes!gio.MountOperation!3!(self: gio.MountOperation; message: cstring; processes: GArray00Array; choices: varargs[string, `$`])!(self: ptr gio.MountOperation00; message: cstring; processes: GArray00Array; choices: cstringArray)",
    "show_unmount_progress!gio.MountOperation!3!(self: gio.MountOperation; message: cstring; timeLeft: int64; bytesLeft: int64)!(self: ptr gio.MountOperation00; message: cstring; timeLeft: int64; bytesLeft: int64)",
    "launch_failed!gio.AppLaunchContext!1!(self: gio.AppLaunchContext; startupNotifyId: cstring)!(self: ptr gio.AppLaunchContext00; startupNotifyId: cstring)",
    "launched!gio.AppLaunchContext!2!(self: gio.AppLaunchContext; info: gio.AppInfo; platformData: glib.Variant)!(self: ptr gio.AppLaunchContext00; info: ptr gio.AppInfo00; platformData: ptr glib.Variant00)",
    "closed!gio.DBusConnection!2!(self: gio.DBusConnection; remotePeerVanished: bool; error: ptr glib.Error)!(self: ptr gio.DBusConnection00; remotePeerVanished: gboolean; error: ptr glib.Error)",
    "items_changed!gio.MenuModel!3!(self: gio.MenuModel; position: int; removed: int; added: int)!(self: ptr gio.MenuModel00; position: int32; removed: int32; added: int32)",
    "allow_mechanism!gio.DBusAuthObserver!1!(self: gio.DBusAuthObserver; mechanism: cstring): bool!(self: ptr gio.DBusAuthObserver00; mechanism: cstring): gboolean",
    "authorize_authenticated_peer!gio.DBusAuthObserver!2!(self: gio.DBusAuthObserver; stream: gio.IOStream; credentials: gio.Credentials = nil): bool!(self: ptr gio.DBusAuthObserver00; stream: ptr gio.IOStream00; credentials: ptr gio.Credentials00): gboolean",
    "changed!gio.FileMonitor!3!(self: gio.FileMonitor; file: gio.GFile; otherFile: gio.GFile = nil; eventType: gio.FileMonitorEvent)!(self: ptr gio.FileMonitor00; file: ptr gio.GFile00; otherFile: ptr gio.GFile00; eventType: gio.FileMonitorEvent)",
    "g_properties_changed!gio.DBusProxy!2!(self: gio.DBusProxy; changedProperties: glib.Variant; invalidatedProperties: varargs[string, `$`])!(self: ptr gio.DBusProxy00; changedProperties: ptr glib.Variant00; invalidatedProperties: cstringArray)",
    "g_signal!gio.DBusProxy!3!(self: gio.DBusProxy; senderName: cstring = nil; signalName: cstring; parameters: glib.Variant)!(self: ptr gio.DBusProxy00; senderName: cstring; signalName: cstring; parameters: ptr glib.Variant00)",
    "interface_proxy_properties_changed!gio.DBusObjectManagerClient!4!(self: gio.DBusObjectManagerClient; objectProxy: gio.DBusObjectProxy; interfaceProxy: gio.DBusProxy; changedProperties: glib.Variant; invalidatedProperties: varargs[string, `$`])!(self: ptr gio.DBusObjectManagerClient00; objectProxy: ptr gio.DBusObjectProxy00; interfaceProxy: ptr gio.DBusProxy00; changedProperties: ptr glib.Variant00; invalidatedProperties: cstringArray)",
    "interface_proxy_signal!gio.DBusObjectManagerClient!5!(self: gio.DBusObjectManagerClient; objectProxy: gio.DBusObjectProxy; interfaceProxy: gio.DBusProxy; senderName: cstring; signalName: cstring; parameters: glib.Variant)!(self: ptr gio.DBusObjectManagerClient00; objectProxy: ptr gio.DBusObjectProxy00; interfaceProxy: ptr gio.DBusProxy00; senderName: cstring; signalName: cstring; parameters: ptr glib.Variant00)",
    "g_authorize_method!gio.DBusInterfaceSkeleton!1!(self: gio.DBusInterfaceSkeleton; invocation: gio.DBusMethodInvocation): bool!(self: ptr gio.DBusInterfaceSkeleton00; invocation: ptr gio.DBusMethodInvocation00): gboolean",
    "authorize_method!gio.DBusObjectSkeleton!2!(self: gio.DBusObjectSkeleton; `interface`: gio.DBusInterfaceSkeleton; invocation: gio.DBusMethodInvocation): bool!(self: ptr gio.DBusObjectSkeleton00; `interface`: ptr gio.DBusInterfaceSkeleton00; invocation: ptr gio.DBusMethodInvocation00): gboolean",
    "interface_added!gio.DBusObject!1!(self: gio.DBusObject; `interface`: gio.DBusInterface)!(self: ptr gio.DBusObject00; `interface`: ptr gio.DBusInterface00)",
    "interface_removed!gio.DBusObject!1!(self: gio.DBusObject; `interface`: gio.DBusInterface)!(self: ptr gio.DBusObject00; `interface`: ptr gio.DBusInterface00)",
    "interface_added!gio.DBusObjectManager!2!(self: gio.DBusObjectManager; `object`: gio.DBusObject; `interface`: gio.DBusInterface)!(self: ptr gio.DBusObjectManager00; `object`: ptr gio.DBusObject00; `interface`: ptr gio.DBusInterface00)",
    "interface_removed!gio.DBusObjectManager!2!(self: gio.DBusObjectManager; `object`: gio.DBusObject; `interface`: gio.DBusInterface)!(self: ptr gio.DBusObjectManager00; `object`: ptr gio.DBusObject00; `interface`: ptr gio.DBusInterface00)",
    "object_added!gio.DBusObjectManager!1!(self: gio.DBusObjectManager; `object`: gio.DBusObject)!(self: ptr gio.DBusObjectManager00; `object`: ptr gio.DBusObject00)",
    "object_removed!gio.DBusObjectManager!1!(self: gio.DBusObjectManager; `object`: gio.DBusObject)!(self: ptr gio.DBusObjectManager00; `object`: ptr gio.DBusObject00)",
    "new_connection!gio.DBusServer!1!(self: gio.DBusServer; connection: gio.DBusConnection): bool!(self: ptr gio.DBusServer00; connection: ptr gio.DBusConnection00): gboolean",
    "accept_certificate!gio.DtlsConnection!2!(self: gio.DtlsConnection; peerCert: gio.TlsCertificate; errors: gio.TlsCertificateFlags): bool!(self: ptr gio.DtlsConnection00; peerCert: ptr gio.TlsCertificate00; errors: gio.TlsCertificateFlags): gboolean",
    "accept_certificate!gio.TlsConnection!2!(self: gio.TlsConnection; peerCert: gio.TlsCertificate; errors: gio.TlsCertificateFlags): bool!(self: ptr gio.TlsConnection00; peerCert: ptr gio.TlsCertificate00; errors: gio.TlsCertificateFlags): gboolean",
    "items_changed!gio.ListModel!3!(self: gio.ListModel; position: int; removed: int; added: int)!(self: ptr gio.ListModel00; position: uint32; removed: uint32; added: uint32)",
    "low_memory_warning!gio.MemoryMonitor!1!(self: gio.MemoryMonitor; level: gio.MemoryMonitorWarningLevel)!(self: ptr gio.MemoryMonitor00; level: gio.MemoryMonitorWarningLevel)",
    "drive_changed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "drive_connected!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "drive_disconnected!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "drive_eject_button!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "drive_stop_button!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "mount_added!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; mount: gio.Mount)!(self: ptr gio.VolumeMonitor00; mount: ptr gio.Mount00)",
    "mount_changed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; mount: gio.Mount)!(self: ptr gio.VolumeMonitor00; mount: ptr gio.Mount00)",
    "mount_pre_unmount!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; mount: gio.Mount)!(self: ptr gio.VolumeMonitor00; mount: ptr gio.Mount00)",
    "mount_removed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; mount: gio.Mount)!(self: ptr gio.VolumeMonitor00; mount: ptr gio.Mount00)",
    "volume_added!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; volume: gio.Volume)!(self: ptr gio.VolumeMonitor00; volume: ptr gio.Volume00)",
    "volume_changed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; volume: gio.Volume)!(self: ptr gio.VolumeMonitor00; volume: ptr gio.Volume00)",
    "volume_removed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; volume: gio.Volume)!(self: ptr gio.VolumeMonitor00; volume: ptr gio.Volume00)",
    "network_changed!gio.NetworkMonitor!1!(self: gio.NetworkMonitor; networkAvailable: bool)!(self: ptr gio.NetworkMonitor00; networkAvailable: gboolean)",
    "change_event!gio.Settings!2!(self: gio.Settings; keys: seq[uint32]): bool!(self: ptr gio.Settings00; keys: uint32Array; nKeys: int32): gboolean",
    "changed!gio.Settings!1!(self: gio.Settings; key: cstring)!(self: ptr gio.Settings00; key: cstring)",
    "writable_change_event!gio.Settings!1!(self: gio.Settings; key: int): bool!(self: ptr gio.Settings00; key: uint32): gboolean",
    "writable_changed!gio.Settings!1!(self: gio.Settings; key: cstring)!(self: ptr gio.Settings00; key: cstring)",
    "event!gio.SocketClient!3!(self: gio.SocketClient; event: gio.SocketClientEvent; connectable: gio.SocketConnectable; connection: gio.IOStream = nil)!(self: ptr gio.SocketClient00; event: gio.SocketClientEvent; connectable: ptr gio.SocketConnectable00; connection: ptr gio.IOStream00)",
    "event!gio.SocketListener!2!(self: gio.SocketListener; event: gio.SocketListenerEvent; socket: gio.Socket)!(self: ptr gio.SocketListener00; event: gio.SocketListenerEvent; socket: ptr gio.Socket00)",
    "incoming!gio.SocketService!2!(self: gio.SocketService; connection: gio.SocketConnection; sourceObject: gobject.Object = nil): bool!(self: ptr gio.SocketService00; connection: ptr gio.SocketConnection00; sourceObject: ptr gobject.Object00): gboolean",
    "run!gio.ThreadedSocketService!2!(self: gio.ThreadedSocketService; connection: gio.SocketConnection; sourceObject: gobject.Object = nil): bool!(self: ptr gio.ThreadedSocketService00; connection: ptr gio.SocketConnection00; sourceObject: ptr gobject.Object00): gboolean",
    "area_updated!gdkpixbuf.PixbufLoader!4!(self: gdkpixbuf.PixbufLoader; x: int; y: int; width: int; height: int)!(self: ptr gdkpixbuf.PixbufLoader00; x: int32; y: int32; width: int32; height: int32)",
    "size_prepared!gdkpixbuf.PixbufLoader!2!(self: gdkpixbuf.PixbufLoader; width: int; height: int)!(self: ptr gdkpixbuf.PixbufLoader00; width: int32; height: int32)",
    "bracket_matched!gtksource5.Buffer!2!(self: gtksource5.Buffer; iter: gtk4.TextIter; state: gtksource5.BracketMatchType)!(self: ptr gtksource5.Buffer00; iter: gtk4.TextIter; state: gtksource5.BracketMatchType)",
    "highlight_updated!gtksource5.Buffer!2!(self: gtksource5.Buffer; start: gtk4.TextIter; `end`: gtk4.TextIter)!(self: ptr gtksource5.Buffer00; start: gtk4.TextIter; `end`: gtk4.TextIter)",
    "source_mark_updated!gtksource5.Buffer!1!(self: gtksource5.Buffer; mark: gtk4.TextMark)!(self: ptr gtksource5.Buffer00; mark: ptr gtk4.TextMark00)",
    "move_cursor!gtksource5.Completion!2!(self: gtksource5.Completion; step: gtk4.ScrollStep; num: int)!(self: ptr gtksource5.Completion00; step: gtk4.ScrollStep; num: int32)",
    "move_page!gtksource5.Completion!2!(self: gtksource5.Completion; step: gtk4.ScrollStep; num: int)!(self: ptr gtksource5.Completion00; step: gtk4.ScrollStep; num: int32)",
    "populate_context!gtksource5.Completion!1!(self: gtksource5.Completion; context: gtksource5.CompletionContext)!(self: ptr gtksource5.Completion00; context: ptr gtksource5.CompletionContext00)",
    "change_case!gtksource5.View!1!(self: gtksource5.View; caseType: gtksource5.ChangeCaseType)!(self: ptr gtksource5.View00; caseType: gtksource5.ChangeCaseType)",
    "change_number!gtksource5.View!1!(self: gtksource5.View; count: int)!(self: ptr gtksource5.View00; count: int32)",
    "line_mark_activated!gtksource5.View!2!(self: gtksource5.View; iter: gtk4.TextIter; event: gdk4.Event)!(self: ptr gtksource5.View00; iter: gtk4.TextIter; event: ptr gdk4.Event00)",
    "move_lines!gtksource5.View!1!(self: gtksource5.View; down: bool)!(self: ptr gtksource5.View00; down: gboolean)",
    "move_to_matching_bracket!gtksource5.View!1!(self: gtksource5.View; extendSelection: bool)!(self: ptr gtksource5.View00; extendSelection: gboolean)",
    "move_words!gtksource5.View!1!(self: gtksource5.View; count: int)!(self: ptr gtksource5.View00; count: int32)",
    "smart_home_end!gtksource5.View!2!(self: gtksource5.View; iter: gtk4.TextIter; count: int)!(self: ptr gtksource5.View00; iter: gtk4.TextIter; count: int32)",
    "activate!gtksource5.GutterRenderer!3!(self: gtksource5.GutterRenderer; iter: gtk4.TextIter; area: gdk4.Rectangle; event: gdk4.Event)!(self: ptr gtksource5.GutterRenderer00; iter: gtk4.TextIter; area: gdk4.Rectangle; event: ptr gdk4.Event00)",
    "query_activatable!gtksource5.GutterRenderer!3!(self: gtksource5.GutterRenderer; iter: gtk4.TextIter; area: gdk4.Rectangle; event: gdk4.Event): bool!(self: ptr gtksource5.GutterRenderer00; iter: gtk4.TextIter; area: gdk4.Rectangle; event: ptr gdk4.Event00): gboolean",
    "query_data!gtksource5.GutterRenderer!3!(self: gtksource5.GutterRenderer; start: gtk4.TextIter; `end`: gtk4.TextIter; state: gtksource5.GutterRendererState)!(self: ptr gtksource5.GutterRenderer00; start: gtk4.TextIter; `end`: gtk4.TextIter; state: gtksource5.GutterRendererState)",
    "query_tooltip!gtksource5.GutterRenderer!5!(self: gtksource5.GutterRenderer; iter: gtk4.TextIter; area: gdk4.Rectangle; x: int; y: int; tooltip: gtk4.Tooltip): bool!(self: ptr gtksource5.GutterRenderer00; iter: gtk4.TextIter; area: gdk4.Rectangle; x: int32; y: int32; tooltip: ptr gtk4.Tooltip00): gboolean",
    "query_tooltip_markup!gtksource5.MarkAttributes!1!(self: gtksource5.MarkAttributes; mark: gtksource5.Mark): string!(self: ptr gtksource5.MarkAttributes00; mark: ptr gtksource5.Mark00): cstring",
    "query_tooltip_text!gtksource5.MarkAttributes!1!(self: gtksource5.MarkAttributes; mark: gtksource5.Mark): string!(self: ptr gtksource5.MarkAttributes00; mark: ptr gtksource5.Mark00): cstring",
    "active_descendant_changed!atk.Object!1!(self: atk.Object; arg1: atk.Object)!(self: ptr atk.Object00; arg1: ptr ptr atk.Object00)",
    "children_changed!atk.Object!2!(self: atk.Object; arg1: int; arg2: atk.Object)!(self: ptr atk.Object00; arg1: uint32; arg2: ptr ptr atk.Object00)",
    "focus_event!atk.Object!1!(self: atk.Object; arg1: bool)!(self: ptr atk.Object00; arg1: gboolean)",
    "property_change!atk.Object!1!(self: atk.Object; arg1: atk.PropertyValues)!(self: ptr atk.Object00; arg1: ptr ptr atk.PropertyValues00)",
    "state_change!atk.Object!2!(self: atk.Object; arg1: cstring; arg2: bool)!(self: ptr atk.Object00; arg1: cstring; arg2: gboolean)",
    "bounds_changed!atk.Component!1!(self: atk.Component; arg1: atk.Rectangle)!(self: ptr atk.Component00; arg1: atk.Rectangle)",
    "page_changed!atk.Document!1!(self: atk.Document; pageNumber: int)!(self: ptr atk.Document00; pageNumber: int32)",
    "link_selected!atk.Hypertext!1!(self: atk.Hypertext; arg1: int)!(self: ptr atk.Hypertext00; arg1: int32)",
    "column_deleted!atk.Table!2!(self: atk.Table; arg1: int; arg2: int)!(self: ptr atk.Table00; arg1: int32; arg2: int32)",
    "column_inserted!atk.Table!2!(self: atk.Table; arg1: int; arg2: int)!(self: ptr atk.Table00; arg1: int32; arg2: int32)",
    "row_deleted!atk.Table!2!(self: atk.Table; arg1: int; arg2: int)!(self: ptr atk.Table00; arg1: int32; arg2: int32)",
    "row_inserted!atk.Table!2!(self: atk.Table; arg1: int; arg2: int)!(self: ptr atk.Table00; arg1: int32; arg2: int32)",
    "text_caret_moved!atk.Text!1!(self: atk.Text; arg1: int)!(self: ptr atk.Text00; arg1: int32)",
    "text_changed!atk.Text!2!(self: atk.Text; arg1: int; arg2: int)!(self: ptr atk.Text00; arg1: int32; arg2: int32)",
    "text_insert!atk.Text!3!(self: atk.Text; arg1: int; arg2: int; arg3: cstring)!(self: ptr atk.Text00; arg1: int32; arg2: int32; arg3: cstring)",
    "text_remove!atk.Text!3!(self: atk.Text; arg1: int; arg2: int; arg3: cstring)!(self: ptr atk.Text00; arg1: int32; arg2: int32; arg3: cstring)",
    "value_changed!atk.Value!2!(self: atk.Value; value: cdouble; text: cstring)!(self: ptr atk.Value00; value: cdouble; text: cstring)",
    "deep_notify!gst.Object!2!(self: gst.Object; propObject: gst.Object; prop: gobject.ParamSpec)!(self: ptr gst.Object00; propObject: ptr gst.Object00; prop: ptr gobject.ParamSpec00)",
    "linked!gst.Pad!1!(self: gst.Pad; peer: gst.Pad)!(self: ptr gst.Pad00; peer: ptr gst.Pad00)",
    "unlinked!gst.Pad!1!(self: gst.Pad; peer: gst.Pad)!(self: ptr gst.Pad00; peer: ptr gst.Pad00)",
    "pad_added!gst.Element!1!(self: gst.Element; newPad: gst.Pad)!(self: ptr gst.Element00; newPad: ptr gst.Pad00)",
    "pad_removed!gst.Element!1!(self: gst.Element; oldPad: gst.Pad)!(self: ptr gst.Element00; oldPad: ptr gst.Pad00)",
    "deep_element_added!gst.Bin!2!(self: gst.Bin; subBin: gst.Bin; element: gst.Element)!(self: ptr gst.Bin00; subBin: ptr gst.Bin00; element: ptr gst.Element00)",
    "deep_element_removed!gst.Bin!2!(self: gst.Bin; subBin: gst.Bin; element: gst.Element)!(self: ptr gst.Bin00; subBin: ptr gst.Bin00; element: ptr gst.Element00)",
    "do_latency!gst.Bin!0!(self: gst.Bin): bool!(self: ptr gst.Bin00): gboolean",
    "element_added!gst.Bin!1!(self: gst.Bin; element: gst.Element)!(self: ptr gst.Bin00; element: ptr gst.Element00)",
    "element_removed!gst.Bin!1!(self: gst.Bin; element: gst.Element)!(self: ptr gst.Bin00; element: ptr gst.Element00)",
    "pad_created!gst.PadTemplate!1!(self: gst.PadTemplate; pad: gst.Pad)!(self: ptr gst.PadTemplate00; pad: ptr gst.Pad00)",
    "stream_notify!gst.StreamCollection!2!(self: gst.StreamCollection; `object`: gst.Stream; p0: gobject.ParamSpec)!(self: ptr gst.StreamCollection00; `object`: ptr gst.Stream00; p0: ptr gobject.ParamSpec00)",
    "synced!gst.Clock!1!(self: gst.Clock; synced: bool)!(self: ptr gst.Clock00; synced: gboolean)",
    "child_added!gst.ChildProxy!2!(self: gst.ChildProxy; `object`: gobject.Object; name: cstring)!(self: ptr gst.ChildProxy00; `object`: ptr gobject.Object00; name: cstring)",
    "child_removed!gst.ChildProxy!2!(self: gst.ChildProxy; `object`: gobject.Object; name: cstring)!(self: ptr gst.ChildProxy00; `object`: ptr gobject.Object00; name: cstring)",
    "provider_hidden!gst.DeviceProvider!1!(self: gst.DeviceProvider; `object`: cstring)!(self: ptr gst.DeviceProvider00; `object`: cstring)",
    "provider_unhidden!gst.DeviceProvider!1!(self: gst.DeviceProvider; `object`: cstring)!(self: ptr gst.DeviceProvider00; `object`: cstring)",
    "message!gst.Bus!1!(self: gst.Bus; message: gst.Message)!(self: ptr gst.Bus00; message: ptr gst.Message00)",
    "sync_message!gst.Bus!1!(self: gst.Bus; message: gst.Message)!(self: ptr gst.Bus00; message: ptr gst.Message00)",
    "feature_added!gst.Registry!1!(self: gst.Registry; feature: gst.PluginFeature)!(self: ptr gst.Registry00; feature: ptr gst.PluginFeature00)",
    "plugin_added!gst.Registry!1!(self: gst.Registry; plugin: gst.Plugin)!(self: ptr gst.Registry00; plugin: ptr gst.Plugin00)",
    "samples_selected!gstbase.Aggregator!5!(self: gstbase.Aggregator; segment: gst.Segment; pts: uint64; dts: uint64; duration: uint64; info: gst.Structure = nil)!(self: ptr gstbase.Aggregator00; segment: ptr gst.Segment00; pts: uint64; dts: uint64; duration: uint64; info: ptr gst.Structure00)",
    "buffer_consumed!gstbase.AggregatorPad!1!(self: gstbase.AggregatorPad; `object`: gst.Buffer)!(self: ptr gstbase.AggregatorPad00; `object`: ptr gst.Buffer00)",
    "new_preroll!gstapp.AppSink!0!(self: gstapp.AppSink): gst.FlowReturn!(self: ptr gstapp.AppSink00): gst.FlowReturn",
    "new_sample!gstapp.AppSink!0!(self: gstapp.AppSink): gst.FlowReturn!(self: ptr gstapp.AppSink00): gst.FlowReturn",
    "pull_preroll!gstapp.AppSink!0!(self: gstapp.AppSink): gst.Sample!(self: ptr gstapp.AppSink00): gst.Sample00",
    "pull_sample!gstapp.AppSink!0!(self: gstapp.AppSink): gst.Sample!(self: ptr gstapp.AppSink00): gst.Sample00",
    "try_pull_preroll!gstapp.AppSink!1!(self: gstapp.AppSink; timeout: uint64): gst.Sample!(self: ptr gstapp.AppSink00; timeout: uint64): gst.Sample00",
    "try_pull_sample!gstapp.AppSink!1!(self: gstapp.AppSink; timeout: uint64): gst.Sample!(self: ptr gstapp.AppSink00; timeout: uint64): gst.Sample00",
    "end_of_stream!gstapp.AppSrc!0!(self: gstapp.AppSrc): gst.FlowReturn!(self: ptr gstapp.AppSrc00): gst.FlowReturn",
    "need_data!gstapp.AppSrc!1!(self: gstapp.AppSrc; length: int)!(self: ptr gstapp.AppSrc00; length: uint32)",
    "push_buffer!gstapp.AppSrc!1!(self: gstapp.AppSrc; buffer: gst.Buffer): gst.FlowReturn!(self: ptr gstapp.AppSrc00; buffer: ptr gst.Buffer00): gst.FlowReturn",
    "push_buffer_list!gstapp.AppSrc!1!(self: gstapp.AppSrc; bufferList: gst.BufferList): gst.FlowReturn!(self: ptr gstapp.AppSrc00; bufferList: ptr gst.BufferList00): gst.FlowReturn",
    "push_sample!gstapp.AppSrc!1!(self: gstapp.AppSrc; sample: gst.Sample): gst.FlowReturn!(self: ptr gstapp.AppSrc00; sample: ptr gst.Sample00): gst.FlowReturn",
    "seek_data!gstapp.AppSrc!1!(self: gstapp.AppSrc; offset: uint64): bool!(self: ptr gstapp.AppSrc00; offset: uint64): gboolean",
    "value_added!gstcontroller.TimedValueControlSource!1!(self: gstcontroller.TimedValueControlSource; timedValue: gstcontroller.ControlPoint)!(self: ptr gstcontroller.TimedValueControlSource00; timedValue: ptr gstcontroller.ControlPoint00)",
    "value_changed!gstcontroller.TimedValueControlSource!1!(self: gstcontroller.TimedValueControlSource; timedValue: gstcontroller.ControlPoint)!(self: ptr gstcontroller.TimedValueControlSource00; timedValue: ptr gstcontroller.ControlPoint00)",
    "value_removed!gstcontroller.TimedValueControlSource!1!(self: gstcontroller.TimedValueControlSource; timedValue: gstcontroller.ControlPoint)!(self: ptr gstcontroller.TimedValueControlSource00; timedValue: ptr gstcontroller.ControlPoint00)",
    "create_context!gstgl.GLDisplay!1!(self: gstgl.GLDisplay; context: gstgl.GLContext): GLContext!(self: ptr gstgl.GLDisplay00; context: ptr gstgl.GLContext00): GLContext00",
    "key_event!gstgl.GLWindow!2!(self: gstgl.GLWindow; id: cstring; key: cstring)!(self: ptr gstgl.GLWindow00; id: cstring; key: cstring)",
    "mouse_event!gstgl.GLWindow!4!(self: gstgl.GLWindow; id: cstring; button: int; x: cdouble; y: cdouble)!(self: ptr gstgl.GLWindow00; id: cstring; button: int32; x: cdouble; y: cdouble)",
    "scroll_event!gstgl.GLWindow!4!(self: gstgl.GLWindow; x: cdouble; y: cdouble; deltaX: cdouble; deltaY: cdouble)!(self: ptr gstgl.GLWindow00; x: cdouble; y: cdouble; deltaX: cdouble; deltaY: cdouble)",
    "send!gstrtsp.RTSPExtension!2!(self: gstrtsp.RTSPExtension; `object`: pointer; p0: pointer): RTSPResult!(self: ptr gstrtsp.RTSPExtension00; `object`: pointer; p0: pointer): RTSPResult",
    "value_changed!gstvideo.ColorBalanceChannel!1!(self: gstvideo.ColorBalanceChannel; value: int)!(self: ptr gstvideo.ColorBalanceChannel00; value: int32)",
    "value_changed!gstvideo.ColorBalance!2!(self: gstvideo.ColorBalance; channel: gstvideo.ColorBalanceChannel; value: int)!(self: ptr gstvideo.ColorBalance00; channel: ptr gstvideo.ColorBalanceChannel00; value: int32)",
    "new_preroll!gstapp.AppSink!0!(self: gstapp.AppSink): gst.FlowReturn!(self: ptr gstapp.AppSink00): gst.FlowReturn",
    "new_sample!gstapp.AppSink!0!(self: gstapp.AppSink): gst.FlowReturn!(self: ptr gstapp.AppSink00): gst.FlowReturn",
    "pull_preroll!gstapp.AppSink!0!(self: gstapp.AppSink): gst.Sample!(self: ptr gstapp.AppSink00): gst.Sample00",
    "pull_sample!gstapp.AppSink!0!(self: gstapp.AppSink): gst.Sample!(self: ptr gstapp.AppSink00): gst.Sample00",
    "try_pull_preroll!gstapp.AppSink!1!(self: gstapp.AppSink; timeout: uint64): gst.Sample!(self: ptr gstapp.AppSink00; timeout: uint64): gst.Sample00",
    "try_pull_sample!gstapp.AppSink!1!(self: gstapp.AppSink; timeout: uint64): gst.Sample!(self: ptr gstapp.AppSink00; timeout: uint64): gst.Sample00",
    "end_of_stream!gstapp.AppSrc!0!(self: gstapp.AppSrc): gst.FlowReturn!(self: ptr gstapp.AppSrc00): gst.FlowReturn",
    "need_data!gstapp.AppSrc!1!(self: gstapp.AppSrc; length: int)!(self: ptr gstapp.AppSrc00; length: uint32)",
    "push_buffer!gstapp.AppSrc!1!(self: gstapp.AppSrc; buffer: gst.Buffer): gst.FlowReturn!(self: ptr gstapp.AppSrc00; buffer: ptr gst.Buffer00): gst.FlowReturn",
    "push_buffer_list!gstapp.AppSrc!1!(self: gstapp.AppSrc; bufferList: gst.BufferList): gst.FlowReturn!(self: ptr gstapp.AppSrc00; bufferList: ptr gst.BufferList00): gst.FlowReturn",
    "push_sample!gstapp.AppSrc!1!(self: gstapp.AppSrc; sample: gst.Sample): gst.FlowReturn!(self: ptr gstapp.AppSrc00; sample: ptr gst.Sample00): gst.FlowReturn",
    "seek_data!gstapp.AppSrc!1!(self: gstapp.AppSrc; offset: uint64): bool!(self: ptr gstapp.AppSrc00; offset: uint64): gboolean",
    "discovered!gstpbutils.Discoverer!2!(self: gstpbutils.Discoverer; info: gstpbutils.DiscovererInfo; error: ptr glib.Error)!(self: ptr gstpbutils.Discoverer00; info: ptr gstpbutils.DiscovererInfo00; error: ptr glib.Error)",
    "source_setup!gstpbutils.Discoverer!1!(self: gstpbutils.Discoverer; source: gst.Element)!(self: ptr gstpbutils.Discoverer00; source: ptr gst.Element00)",
  ]
