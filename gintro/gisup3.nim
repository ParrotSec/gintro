const
  SCA = [
    "button_press_event!Widget!1!(self: Widget; event: gdk.EventButton): bool!(self: ptr Widget00; event: ptr gdk.EventButton00): gboolean",
    "button_release_event!Widget!1!(self: Widget; event: gdk.EventButton): bool!(self: ptr Widget00; event: ptr gdk.EventButton00): gboolean",
    "can_activate_accel!Widget!1!(self: Widget; signalId: int): bool!(self: ptr Widget00; signalId: uint32): gboolean",
    "child_notify!Widget!1!(self: Widget; childProperty: gobject.ParamSpec)!(self: ptr Widget00; childProperty: ptr gobject.ParamSpec00)",
    "configure_event!Widget!1!(self: Widget; event: gdk.EventConfigure): bool!(self: ptr Widget00; event: ptr gdk.EventConfigure00): gboolean",
    "damage_event!Widget!1!(self: Widget; event: gdk.EventExpose): bool!(self: ptr Widget00; event: ptr gdk.EventExpose00): gboolean",
    "delete_event!Widget!1!(self: Widget; event: gdk.Event): bool!(self: ptr Widget00; event: ptr gdk.Event00): gboolean",
    "destroy_event!Widget!1!(self: Widget; event: gdk.Event): bool!(self: ptr Widget00; event: ptr gdk.Event00): gboolean",
    "direction_changed!Widget!1!(self: Widget; previousDirection: TextDirection)!(self: ptr Widget00; previousDirection: TextDirection)",
    "drag_begin!Widget!1!(self: Widget; context: gdk.DragContext)!(self: ptr Widget00; context: ptr gdk.DragContext00)",
    "drag_data_delete!Widget!1!(self: Widget; context: gdk.DragContext)!(self: ptr Widget00; context: ptr gdk.DragContext00)",
    "drag_data_get!Widget!4!(self: Widget; context: gdk.DragContext; data: SelectionData; info: int; time: int)!(self: ptr Widget00; context: ptr gdk.DragContext00; data: ptr SelectionData00; info: uint32; time: uint32)",
    "drag_data_received!Widget!6!(self: Widget; context: gdk.DragContext; x: int; y: int; data: SelectionData; info: int; time: int)!(self: ptr Widget00; context: ptr gdk.DragContext00; x: int32; y: int32; data: ptr SelectionData00; info: uint32; time: uint32)",
    "drag_drop!Widget!4!(self: Widget; context: gdk.DragContext; x: int; y: int; time: int): bool!(self: ptr Widget00; context: ptr gdk.DragContext00; x: int32; y: int32; time: uint32): gboolean",
    "drag_end!Widget!1!(self: Widget; context: gdk.DragContext)!(self: ptr Widget00; context: ptr gdk.DragContext00)",
    "drag_failed!Widget!2!(self: Widget; context: gdk.DragContext; resu: DragResult): bool!(self: ptr Widget00; context: ptr gdk.DragContext00; resu: DragResult): gboolean",
    "drag_leave!Widget!2!(self: Widget; context: gdk.DragContext; time: int)!(self: ptr Widget00; context: ptr gdk.DragContext00; time: uint32)",
    "drag_motion!Widget!4!(self: Widget; context: gdk.DragContext; x: int; y: int; time: int): bool!(self: ptr Widget00; context: ptr gdk.DragContext00; x: int32; y: int32; time: uint32): gboolean",
    "draw!Widget!1!(self: Widget; cr: cairo.Context): bool!(self: ptr Widget00; cr: ptr cairo.Context00): gboolean",
    "enter_notify_event!Widget!1!(self: Widget; event: gdk.EventCrossing): bool!(self: ptr Widget00; event: ptr gdk.EventCrossing00): gboolean",
    "event!Widget!1!(self: Widget; event: gdk.Event): bool!(self: ptr Widget00; event: ptr gdk.Event00): gboolean",
    "event_after!Widget!1!(self: Widget; event: gdk.Event)!(self: ptr Widget00; event: ptr gdk.Event00)",
    "focus!Widget!1!(self: Widget; direction: DirectionType): bool!(self: ptr Widget00; direction: DirectionType): gboolean",
    "focus_in_event!Widget!1!(self: Widget; event: gdk.EventFocus): bool!(self: ptr Widget00; event: ptr gdk.EventFocus00): gboolean",
    "focus_out_event!Widget!1!(self: Widget; event: gdk.EventFocus): bool!(self: ptr Widget00; event: ptr gdk.EventFocus00): gboolean",
    "grab_broken_event!Widget!1!(self: Widget; event: gdk.EventGrabBroken): bool!(self: ptr Widget00; event: ptr gdk.EventGrabBroken00): gboolean",
    "grab_notify!Widget!1!(self: Widget; wasGrabbed: bool)!(self: ptr Widget00; wasGrabbed: gboolean)",
    "hierarchy_changed!Widget!1!(self: Widget; previousToplevel: Widget = nil)!(self: ptr Widget00; previousToplevel: ptr Widget00)",
    "key_press_event!Widget!1!(self: Widget; event: gdk.EventKey): bool!(self: ptr Widget00; event: ptr gdk.EventKey00): gboolean",
    "key_release_event!Widget!1!(self: Widget; event: gdk.EventKey): bool!(self: ptr Widget00; event: ptr gdk.EventKey00): gboolean",
    "keynav_failed!Widget!1!(self: Widget; direction: DirectionType): bool!(self: ptr Widget00; direction: DirectionType): gboolean",
    "leave_notify_event!Widget!1!(self: Widget; event: gdk.EventCrossing): bool!(self: ptr Widget00; event: ptr gdk.EventCrossing00): gboolean",
    "map_event!Widget!1!(self: Widget; event: gdk.EventAny): bool!(self: ptr Widget00; event: ptr gdk.EventAny00): gboolean",
    "mnemonic_activate!Widget!1!(self: Widget; groupCycling: bool): bool!(self: ptr Widget00; groupCycling: gboolean): gboolean",
    "motion_notify_event!Widget!1!(self: Widget; event: gdk.EventMotion): bool!(self: ptr Widget00; event: ptr gdk.EventMotion00): gboolean",
    "move_focus!Widget!1!(self: Widget; direction: DirectionType)!(self: ptr Widget00; direction: DirectionType)",
    "parent_set!Widget!1!(self: Widget; oldParent: Widget = nil)!(self: ptr Widget00; oldParent: ptr Widget00)",
    "popup_menu!Widget!0!(self: Widget): bool!(self: ptr Widget00): gboolean",
    "property_notify_event!Widget!1!(self: Widget; event: gdk.EventProperty): bool!(self: ptr Widget00; event: ptr gdk.EventProperty00): gboolean",
    "proximity_in_event!Widget!1!(self: Widget; event: gdk.EventProximity): bool!(self: ptr Widget00; event: ptr gdk.EventProximity00): gboolean",
    "proximity_out_event!Widget!1!(self: Widget; event: gdk.EventProximity): bool!(self: ptr Widget00; event: ptr gdk.EventProximity00): gboolean",
    "query_tooltip!Widget!4!(self: Widget; x: int; y: int; keyboardMode: bool; tooltip: Tooltip): bool!(self: ptr Widget00; x: int32; y: int32; keyboardMode: gboolean; tooltip: ptr Tooltip00): gboolean",
    "screen_changed!Widget!1!(self: Widget; previousScreen: gdk.Screen = nil)!(self: ptr Widget00; previousScreen: ptr gdk.Screen00)",
    "scroll_event!Widget!1!(self: Widget; event: gdk.EventScroll): bool!(self: ptr Widget00; event: ptr gdk.EventScroll00): gboolean",
    "selection_clear_event!Widget!1!(self: Widget; event: gdk.EventSelection): bool!(self: ptr Widget00; event: ptr gdk.EventSelection00): gboolean",
    "selection_get!Widget!3!(self: Widget; data: SelectionData; info: int; time: int)!(self: ptr Widget00; data: ptr SelectionData00; info: uint32; time: uint32)",
    "selection_notify_event!Widget!1!(self: Widget; event: gdk.EventSelection): bool!(self: ptr Widget00; event: ptr gdk.EventSelection00): gboolean",
    "selection_received!Widget!2!(self: Widget; data: SelectionData; time: int)!(self: ptr Widget00; data: ptr SelectionData00; time: uint32)",
    "selection_request_event!Widget!1!(self: Widget; event: gdk.EventSelection): bool!(self: ptr Widget00; event: ptr gdk.EventSelection00): gboolean",
    "show_help!Widget!1!(self: Widget; helpType: WidgetHelpType): bool!(self: ptr Widget00; helpType: WidgetHelpType): gboolean",
    "size_allocate!Widget!1!(self: Widget; allocation: gdk.Rectangle)!(self: ptr Widget00; allocation: gdk.Rectangle)",
    "state_changed!Widget!1!(self: Widget; state: StateType)!(self: ptr Widget00; state: StateType)",
    "state_flags_changed!Widget!1!(self: Widget; flags: StateFlags)!(self: ptr Widget00; flags: StateFlags)",
    "style_set!Widget!1!(self: Widget; previousStyle: Style = nil)!(self: ptr Widget00; previousStyle: ptr Style00)",
    "touch_event!Widget!1!(self: Widget; `object`: gdk.Event): bool!(self: ptr Widget00; `object`: ptr gdk.Event00): gboolean",
    "unmap_event!Widget!1!(self: Widget; event: gdk.EventAny): bool!(self: ptr Widget00; event: ptr gdk.EventAny00): gboolean",
    "visibility_notify_event!Widget!1!(self: Widget; event: gdk.EventVisibility): bool!(self: ptr Widget00; event: ptr gdk.EventVisibility00): gboolean",
    "window_state_event!Widget!1!(self: Widget; event: gdk.EventWindowState): bool!(self: ptr Widget00; event: ptr gdk.EventWindowState00): gboolean",
    "add!Container!1!(self: Container; `object`: Widget)!(self: ptr Container00; `object`: ptr Widget00)",
    "remove!Container!1!(self: Container; `object`: Widget)!(self: ptr Container00; `object`: ptr Widget00)",
    "set_focus_child!Container!1!(self: Container; `object`: Widget)!(self: ptr Container00; `object`: ptr Widget00)",
    "enable_debugging!Window!1!(self: Window | WindowAccessible; toggle: bool): bool!(self: ptr Window00; toggle: gboolean): gboolean",
    "set_focus!Window!1!(self: Window | WindowAccessible; widget: Widget = nil)!(self: ptr Window00; widget: ptr Widget00)",
    "response!Dialog!1!(self: Dialog; responseId: int)!(self: ptr Dialog00; responseId: int32)",
    "activate_link!AboutDialog!1!(self: AboutDialog; uri: cstring): bool!(self: ptr AboutDialog00; uri: cstring): gboolean",
    "window_added!Application!1!(self: Application; window: Window)!(self: ptr Application00; window: ptr Window00)",
    "window_removed!Application!1!(self: Application; window: Window)!(self: ptr Application00; window: ptr Window00)",
    "owner_change!Clipboard!1!(self: Clipboard; event: gdk.EventOwnerChange)!(self: ptr Clipboard00; event: ptr gdk.EventOwnerChange00)",
    "parsing_error!CssProvider!2!(self: CssProvider; section: CssSection; error: ptr glib.Error)!(self: ptr CssProvider00; section: ptr CssSection00; error: ptr glib.Error)",
    "accel_activate!AccelGroup!3!(self: AccelGroup; acceleratable: gobject.Object; keyval: int; modifier: gdk.ModifierType): bool!(self: ptr AccelGroup00; acceleratable: ptr gobject.Object00; keyval: uint32; modifier: gdk.ModifierType): gboolean",
    "accel_changed!AccelGroup!3!(self: AccelGroup; keyval: int; modifier: gdk.ModifierType; accelClosure: gobject.Closure)!(self: ptr AccelGroup00; keyval: uint32; modifier: gdk.ModifierType; accelClosure: ptr gobject.Closure00)",
    "event!TextTag!3!(self: TextTag; `object`: gobject.Object; event: gdk.Event; iter: TextIter): bool!(self: ptr TextTag00; `object`: ptr gobject.Object00; event: ptr gdk.Event00; iter: TextIter): gboolean",
    "apply_tag!TextBuffer!3!(self: TextBuffer; tag: TextTag; start: TextIter; `end`: TextIter)!(self: ptr TextBuffer00; tag: ptr TextTag00; start: TextIter; `end`: TextIter)",
    "delete_range!TextBuffer!2!(self: TextBuffer; start: TextIter; `end`: TextIter)!(self: ptr TextBuffer00; start: TextIter; `end`: TextIter)",
    "insert_child_anchor!TextBuffer!2!(self: TextBuffer; location: TextIter; anchor: TextChildAnchor)!(self: ptr TextBuffer00; location: TextIter; anchor: ptr TextChildAnchor00)",
    "insert_pixbuf!TextBuffer!2!(self: TextBuffer; location: TextIter; pixbuf: gdkpixbuf.Pixbuf)!(self: ptr TextBuffer00; location: TextIter; pixbuf: ptr gdkpixbuf.Pixbuf00)",
    "insert_text!TextBuffer!3!(self: TextBuffer; location: TextIter; text: cstring; len: int)!(self: ptr TextBuffer00; location: TextIter; text: cstring; len: int32)",
    "mark_deleted!TextBuffer!1!(self: TextBuffer; mark: TextMark)!(self: ptr TextBuffer00; mark: ptr TextMark00)",
    "mark_set!TextBuffer!2!(self: TextBuffer; location: TextIter; mark: TextMark)!(self: ptr TextBuffer00; location: TextIter; mark: ptr TextMark00)",
    "paste_done!TextBuffer!1!(self: TextBuffer; clipboard: Clipboard)!(self: ptr TextBuffer00; clipboard: ptr Clipboard00)",
    "remove_tag!TextBuffer!3!(self: TextBuffer; tag: TextTag; start: TextIter; `end`: TextIter)!(self: ptr TextBuffer00; tag: ptr TextTag00; start: TextIter; `end`: TextIter)",
    "tag_added!TextTagTable!1!(self: TextTagTable; tag: TextTag)!(self: ptr TextTagTable00; tag: ptr TextTag00)",
    "tag_changed!TextTagTable!2!(self: TextTagTable; tag: TextTag; sizeChanged: bool)!(self: ptr TextTagTable00; tag: ptr TextTag00; sizeChanged: gboolean)",
    "tag_removed!TextTagTable!1!(self: TextTagTable; tag: TextTag)!(self: ptr TextTagTable00; tag: ptr TextTag00)",
    "activate_current!MenuShell!1!(self: MenuShell; forceHide: bool)!(self: ptr MenuShell00; forceHide: gboolean)",
    "cycle_focus!MenuShell!1!(self: MenuShell; direction: DirectionType)!(self: ptr MenuShell00; direction: DirectionType)",
    "insert!MenuShell!2!(self: MenuShell; child: Widget; position: int)!(self: ptr MenuShell00; child: ptr Widget00; position: int32)",
    "move_current!MenuShell!1!(self: MenuShell; direction: MenuDirectionType)!(self: ptr MenuShell00; direction: MenuDirectionType)",
    "move_selected!MenuShell!1!(self: MenuShell; distance: int): bool!(self: ptr MenuShell00; distance: int32): gboolean",
    "move_scroll!Menu!1!(self: Menu; scrollType: ScrollType)!(self: ptr Menu00; scrollType: ScrollType)",
    "popped_up!Menu!4!(self: Menu; flippedRect: pointer; finalRect: pointer; flippedX: bool; flippedY: bool)!(self: ptr Menu00; flippedRect: pointer; finalRect: pointer; flippedX: gboolean; flippedY: gboolean)",
    "activate_link!Label!1!(self: Label; uri: cstring): bool!(self: ptr Label00; uri: cstring): gboolean",
    "move_cursor!Label!3!(self: Label; step: MovementStep; count: int; extendSelection: bool)!(self: ptr Label00; step: MovementStep; count: int32; extendSelection: gboolean)",
    "populate_popup!Label!1!(self: Label; menu: Menu)!(self: ptr Label00; menu: ptr Menu00)",
    "toggle_size_allocate!MenuItem!1!(self: MenuItem; `object`: int)!(self: ptr MenuItem00; `object`: int32)",
    "toggle_size_request!MenuItem!1!(self: MenuItem; `object`: pointer)!(self: ptr MenuItem00; `object`: pointer)",
    "changed!AccelMap!3!(self: AccelMap; accelPath: cstring; accelKey: int; accelMods: gdk.ModifierType)!(self: ptr AccelMap00; accelPath: cstring; accelKey: uint32; accelMods: gdk.ModifierType)",
    "format_entry_text!ComboBox!1!(self: ComboBox; path: cstring): string!(self: ptr ComboBox00; path: cstring): cstring",
    "move_active!ComboBox!1!(self: ComboBox; scrollType: ScrollType)!(self: ptr ComboBox00; scrollType: ScrollType)",
    "popdown!ComboBox!0!(self: ComboBox): bool!(self: ptr ComboBox00): gboolean",
    "delete_from_cursor!Entry!2!(self: Entry; `type`: DeleteType; count: int)!(self: ptr Entry00; `type`: DeleteType; count: int32)",
    "icon_press!Entry!2!(self: Entry; iconPos: EntryIconPosition; event: gdk.EventButton)!(self: ptr Entry00; iconPos: EntryIconPosition; event: ptr gdk.EventButton00)",
    "icon_release!Entry!2!(self: Entry; iconPos: EntryIconPosition; event: gdk.EventButton)!(self: ptr Entry00; iconPos: EntryIconPosition; event: ptr gdk.EventButton00)",
    "insert_at_cursor!Entry!1!(self: Entry; string: cstring)!(self: ptr Entry00; string: cstring)",
    "move_cursor!Entry!3!(self: Entry; step: MovementStep; count: int; extendSelection: bool)!(self: ptr Entry00; step: MovementStep; count: int32; extendSelection: gboolean)",
    "populate_popup!Entry!1!(self: Entry; widget: Widget)!(self: ptr Entry00; widget: ptr Widget00)",
    "preedit_changed!Entry!1!(self: Entry; preedit: cstring)!(self: ptr Entry00; preedit: cstring)",
    "change_value!SpinButton!1!(self: SpinButton; scroll: ScrollType)!(self: ptr SpinButton00; scroll: ScrollType)",
    "input!SpinButton!1!(self: SpinButton; newValue: var cdouble): int!(self: ptr SpinButton00; newValue: var cdouble): int32",
    "output!SpinButton!0!(self: SpinButton): bool!(self: ptr SpinButton00): gboolean",
    "custom_item_activated!AppChooserButton!1!(self: AppChooserButton; itemName: cstring)!(self: ptr AppChooserButton00; itemName: cstring)",
    "editing_started!CellRenderer!2!(self: CellRenderer; editable: CellEditable | ComboBoxText | SpinButton | AppChooserButton | Entry | SearchEntry | ComboBox; path: cstring)!(self: ptr CellRenderer00; editable: ptr CellEditable00; path: cstring)",
    "deleted_text!EntryBuffer!2!(self: EntryBuffer; position: int; nChars: int)!(self: ptr EntryBuffer00; position: uint32; nChars: uint32)",
    "inserted_text!EntryBuffer!3!(self: EntryBuffer; position: int; chars: cstring; nChars: int)!(self: ptr EntryBuffer00; position: uint32; chars: cstring; nChars: uint32)",
    "row_changed!TreeModel!2!(self: TreeModel | TreeModelSort | ListStore | TreeModelFilter | TreeStore; path: TreePath; iter: TreeIter)!(self: ptr TreeModel00; path: ptr TreePath00; iter: TreeIter)",
    "row_deleted!TreeModel!1!(self: TreeModel | TreeModelSort | ListStore | TreeModelFilter | TreeStore; path: TreePath)!(self: ptr TreeModel00; path: ptr TreePath00)",
    "row_has_child_toggled!TreeModel!2!(self: TreeModel | TreeModelSort | ListStore | TreeModelFilter | TreeStore; path: TreePath; iter: TreeIter)!(self: ptr TreeModel00; path: ptr TreePath00; iter: TreeIter)",
    "row_inserted!TreeModel!2!(self: TreeModel | TreeModelSort | ListStore | TreeModelFilter | TreeStore; path: TreePath; iter: TreeIter)!(self: ptr TreeModel00; path: ptr TreePath00; iter: TreeIter)",
    "add_editable!CellArea!4!(self: CellArea; renderer: CellRenderer; editable: CellEditable | ComboBoxText | SpinButton | AppChooserButton | Entry | SearchEntry | ComboBox; cellArea: gdk.Rectangle; path: cstring)!(self: ptr CellArea00; renderer: ptr CellRenderer00; editable: ptr CellEditable00; cellArea: gdk.Rectangle; path: cstring)",
    "apply_attributes!CellArea!4!(self: CellArea; model: TreeModel | TreeModelSort | ListStore | TreeModelFilter | TreeStore; iter: TreeIter; isExpander: bool; isExpanded: bool)!(self: ptr CellArea00; model: ptr TreeModel00; iter: TreeIter; isExpander: gboolean; isExpanded: gboolean)",
    "focus_changed!CellArea!2!(self: CellArea; renderer: CellRenderer; path: cstring)!(self: ptr CellArea00; renderer: ptr CellRenderer00; path: cstring)",
    "remove_editable!CellArea!2!(self: CellArea; renderer: CellRenderer; editable: CellEditable | ComboBoxText | SpinButton | AppChooserButton | Entry | SearchEntry | ComboBox)!(self: ptr CellArea00; renderer: ptr CellRenderer00; editable: ptr CellEditable00)",
    "action_activated!EntryCompletion!1!(self: EntryCompletion; index: int)!(self: ptr EntryCompletion00; index: int32)",
    "cursor_on_match!EntryCompletion!2!(self: EntryCompletion; model: TreeModel | TreeModelSort | ListStore | TreeModelFilter | TreeStore; iter: TreeIter): bool!(self: ptr EntryCompletion00; model: ptr TreeModel00; iter: TreeIter): gboolean",
    "insert_prefix!EntryCompletion!1!(self: EntryCompletion; prefix: cstring): bool!(self: ptr EntryCompletion00; prefix: cstring): gboolean",
    "match_selected!EntryCompletion!2!(self: EntryCompletion; model: TreeModel | TreeModelSort | ListStore | TreeModelFilter | TreeStore; iter: TreeIter): bool!(self: ptr EntryCompletion00; model: ptr TreeModel00; iter: TreeIter): gboolean",
    "connect_proxy!ActionGroup!2!(self: ActionGroup | gio.SimpleActionGroup | Application | ApplicationWindow; action: Action; proxy: Widget)!(self: ptr ActionGroup00; action: ptr Action00; proxy: ptr Widget00)",
    "disconnect_proxy!ActionGroup!2!(self: ActionGroup | gio.SimpleActionGroup | Application | ApplicationWindow; action: Action; proxy: Widget)!(self: ptr ActionGroup00; action: ptr Action00; proxy: ptr Widget00)",
    "post_activate!ActionGroup!1!(self: ActionGroup | gio.SimpleActionGroup | Application | ApplicationWindow; action: Action)!(self: ptr ActionGroup00; action: ptr Action00)",
    "pre_activate!ActionGroup!1!(self: ActionGroup | gio.SimpleActionGroup | Application | ApplicationWindow; action: Action)!(self: ptr ActionGroup00; action: ptr Action00)",
    "create_menu_proxy!ToolItem!0!(self: ToolItem): bool!(self: ptr ToolItem00): gboolean",
    "value_changed!ScaleButton!1!(self: ScaleButton; value: cdouble)!(self: ptr ScaleButton00; value: cdouble)",
    "state_set!Switch!1!(self: Switch; state: bool): bool!(self: ptr Switch00; state: gboolean): gboolean",
    "activate_link!LinkButton!0!(self: LinkButton): bool!(self: ptr LinkButton00): gboolean",
    "application_activated!AppChooserWidget!1!(self: AppChooserWidget; application: gio.AppInfo)!(self: ptr AppChooserWidget00; application: ptr gio.AppInfo00)",
    "application_selected!AppChooserWidget!1!(self: AppChooserWidget; application: gio.AppInfo)!(self: ptr AppChooserWidget00; application: ptr gio.AppInfo00)",
    "populate_popup!AppChooserWidget!2!(self: AppChooserWidget; menu: Menu; application: gio.AppInfo)!(self: ptr AppChooserWidget00; menu: ptr Menu00; application: ptr gio.AppInfo00)",
    "prepare!Assistant!1!(self: Assistant; page: Widget)!(self: ptr Assistant00; page: ptr Widget00)",
    "activate_cursor_item!IconView!0!(self: IconView): bool!(self: ptr IconView00): gboolean",
    "item_activated!IconView!1!(self: IconView; path: TreePath)!(self: ptr IconView00; path: ptr TreePath00)",
    "move_cursor!IconView!2!(self: IconView; step: MovementStep; count: int): bool!(self: ptr IconView00; step: MovementStep; count: int32): gboolean",
    "child_activated!FlowBox!1!(self: FlowBox; child: FlowBoxChild)!(self: ptr FlowBox00; child: ptr FlowBoxChild00)",
    "move_cursor!FlowBox!2!(self: FlowBox; step: MovementStep; count: int): bool!(self: ptr FlowBox00; step: MovementStep; count: int32): gboolean",
    "accept_position!Paned!0!(self: Paned): bool!(self: ptr Paned00): gboolean",
    "cancel_position!Paned!0!(self: Paned): bool!(self: ptr Paned00): gboolean",
    "cycle_child_focus!Paned!1!(self: Paned; reversed: bool): bool!(self: ptr Paned00; reversed: gboolean): gboolean",
    "cycle_handle_focus!Paned!1!(self: Paned; reversed: bool): bool!(self: ptr Paned00; reversed: gboolean): gboolean",
    "move_handle!Paned!1!(self: Paned; scrollType: ScrollType): bool!(self: ptr Paned00; scrollType: ScrollType): gboolean",
    "toggle_handle_focus!Paned!0!(self: Paned): bool!(self: ptr Paned00): gboolean",
    "adjust_bounds!Range!1!(self: Range; value: cdouble)!(self: ptr Range00; value: cdouble)",
    "change_value!Range!2!(self: Range; scroll: ScrollType; value: cdouble): bool!(self: ptr Range00; scroll: ScrollType; value: cdouble): gboolean",
    "move_slider!Range!1!(self: Range; step: ScrollType)!(self: ptr Range00; step: ScrollType)",
    "format_value!Scale!1!(self: Scale; value: cdouble): string!(self: ptr Scale00; value: cdouble): cstring",
    "text_popped!Statusbar!2!(self: Statusbar; contextId: int; text: cstring)!(self: ptr Statusbar00; contextId: uint32; text: cstring)",
    "text_pushed!Statusbar!2!(self: Statusbar; contextId: int; text: cstring)!(self: ptr Statusbar00; contextId: uint32; text: cstring)",
    "focus_home_or_end!Toolbar!1!(self: Toolbar; focusHome: bool): bool!(self: ptr Toolbar00; focusHome: gboolean): gboolean",
    "orientation_changed!Toolbar!1!(self: Toolbar; orientation: Orientation)!(self: ptr Toolbar00; orientation: Orientation)",
    "popup_context_menu!Toolbar!3!(self: Toolbar; x: int; y: int; button: int): bool!(self: ptr Toolbar00; x: int32; y: int32; button: int32): gboolean",
    "style_changed!Toolbar!1!(self: Toolbar; style: ToolbarStyle)!(self: ptr Toolbar00; style: ToolbarStyle)",
    "changed!RadioAction!1!(self: RadioAction; current: RadioAction)!(self: ptr RadioAction00; current: ptr RadioAction00)",
    "add_widget!UIManager!1!(self: UIManager; widget: Widget)!(self: ptr UIManager00; widget: ptr Widget00)",
    "connect_proxy!UIManager!2!(self: UIManager; action: Action; proxy: Widget)!(self: ptr UIManager00; action: ptr Action00; proxy: ptr Widget00)",
    "disconnect_proxy!UIManager!2!(self: UIManager; action: Action; proxy: Widget)!(self: ptr UIManager00; action: ptr Action00; proxy: ptr Widget00)",
    "post_activate!UIManager!1!(self: UIManager; action: Action)!(self: ptr UIManager00; action: ptr Action00)",
    "pre_activate!UIManager!1!(self: UIManager; action: Action)!(self: ptr UIManager00; action: ptr Action00)",
    "change_current_page!ShortcutsSection!1!(self: ShortcutsSection; `object`: int): bool!(self: ptr ShortcutsSection00; `object`: int32): gboolean",
    "edge_overshot!ScrolledWindow!1!(self: ScrolledWindow; pos: PositionType)!(self: ptr ScrolledWindow00; pos: PositionType)",
    "edge_reached!ScrolledWindow!1!(self: ScrolledWindow; pos: PositionType)!(self: ptr ScrolledWindow00; pos: PositionType)",
    "move_focus_out!ScrolledWindow!1!(self: ScrolledWindow; directionType: DirectionType)!(self: ptr ScrolledWindow00; directionType: DirectionType)",
    "scroll_child!ScrolledWindow!2!(self: ScrolledWindow; scroll: ScrollType; horizontal: bool): bool!(self: ptr ScrolledWindow00; scroll: ScrollType; horizontal: gboolean): gboolean",
    "drag_action_ask!PlacesSidebar!1!(self: PlacesSidebar; actions: int): int!(self: ptr PlacesSidebar00; actions: int32): int32",
    "drag_action_requested!PlacesSidebar!3!(self: PlacesSidebar; context: gdk.DragContext; destFile: gio.GFile; sourceFileList: ptr pointer): int!(self: ptr PlacesSidebar00; context: ptr gdk.DragContext00; destFile: ptr gio.GFile00; sourceFileList: ptr pointer): int32",
    "drag_perform_drop!PlacesSidebar!3!(self: PlacesSidebar; destFile: gio.GFile; sourceFileList: ptr pointer; action: int)!(self: ptr PlacesSidebar00; destFile: ptr gio.GFile00; sourceFileList: ptr pointer; action: int32)",
    "mount!PlacesSidebar!1!(self: PlacesSidebar; mountOperation: gio.MountOperation)!(self: ptr PlacesSidebar00; mountOperation: ptr gio.MountOperation00)",
    "open_location!PlacesSidebar!2!(self: PlacesSidebar; location: gio.GFile; openFlags: PlacesOpenFlags)!(self: ptr PlacesSidebar00; location: ptr gio.GFile00; openFlags: PlacesOpenFlags)",
    "populate_popup!PlacesSidebar!3!(self: PlacesSidebar; container: Widget; selectedItem: gio.GFile = nil; selectedVolume: gio.Volume = nil)!(self: ptr PlacesSidebar00; container: ptr Widget00; selectedItem: ptr gio.GFile00; selectedVolume: ptr gio.Volume00)",
    "show_error_message!PlacesSidebar!2!(self: PlacesSidebar; primary: cstring; secondary: cstring)!(self: ptr PlacesSidebar00; primary: cstring; secondary: cstring)",
    "show_other_locations_with_flags!PlacesSidebar!1!(self: PlacesSidebar; openFlags: PlacesOpenFlags)!(self: ptr PlacesSidebar00; openFlags: PlacesOpenFlags)",
    "show_starred_location!PlacesSidebar!1!(self: PlacesSidebar; openFlags: PlacesOpenFlags)!(self: ptr PlacesSidebar00; openFlags: PlacesOpenFlags)",
    "unmount!PlacesSidebar!1!(self: PlacesSidebar; mountOperation: gio.MountOperation)!(self: ptr PlacesSidebar00; mountOperation: ptr gio.MountOperation00)",
    "delete_from_cursor!TextView!2!(self: TextView; `type`: DeleteType; count: int)!(self: ptr TextView00; `type`: DeleteType; count: int32)",
    "extend_selection!TextView!4!(self: TextView; granularity: TextExtendSelection; location: TextIter; start: TextIter; `end`: TextIter): bool!(self: ptr TextView00; granularity: TextExtendSelection; location: TextIter; start: TextIter; `end`: TextIter): gboolean",
    "insert_at_cursor!TextView!1!(self: TextView; string: cstring)!(self: ptr TextView00; string: cstring)",
    "move_cursor!TextView!3!(self: TextView; step: MovementStep; count: int; extendSelection: bool)!(self: ptr TextView00; step: MovementStep; count: int32; extendSelection: gboolean)",
    "move_viewport!TextView!2!(self: TextView; step: ScrollStep; count: int)!(self: ptr TextView00; step: ScrollStep; count: int32)",
    "populate_popup!TextView!1!(self: TextView; popup: Widget)!(self: ptr TextView00; popup: ptr Widget00)",
    "preedit_changed!TextView!1!(self: TextView; preedit: cstring)!(self: ptr TextView00; preedit: cstring)",
    "select_all!TextView!1!(self: TextView; select: bool)!(self: ptr TextView00; select: gboolean)",
    "change_current_page!Notebook!1!(self: Notebook; `object`: int): bool!(self: ptr Notebook00; `object`: int32): gboolean",
    "create_window!Notebook!3!(self: Notebook; page: Widget; x: int; y: int): Notebook!(self: ptr Notebook00; page: ptr Widget00; x: int32; y: int32): Notebook00",
    "focus_tab!Notebook!1!(self: Notebook; `object`: NotebookTab): bool!(self: ptr Notebook00; `object`: NotebookTab): gboolean",
    "move_focus_out!Notebook!1!(self: Notebook; `object`: DirectionType)!(self: ptr Notebook00; `object`: DirectionType)",
    "page_added!Notebook!2!(self: Notebook; child: Widget; pageNum: int)!(self: ptr Notebook00; child: ptr Widget00; pageNum: uint32)",
    "page_removed!Notebook!2!(self: Notebook; child: Widget; pageNum: int)!(self: ptr Notebook00; child: ptr Widget00; pageNum: uint32)",
    "page_reordered!Notebook!2!(self: Notebook; child: Widget; pageNum: int)!(self: ptr Notebook00; child: ptr Widget00; pageNum: uint32)",
    "reorder_tab!Notebook!2!(self: Notebook; `object`: DirectionType; p0: bool): bool!(self: ptr Notebook00; `object`: DirectionType; p0: gboolean): gboolean",
    "select_page!Notebook!1!(self: Notebook; `object`: bool): bool!(self: ptr Notebook00; `object`: gboolean): gboolean",
    "switch_page!Notebook!2!(self: Notebook; page: Widget; pageNum: int)!(self: ptr Notebook00; page: ptr Widget00; pageNum: uint32)",
    "get_child_position!Overlay!2!(self: Overlay; widget: Widget; allocation: var gdk.Rectangle): bool!(self: ptr Overlay00; widget: ptr Widget00; allocation: var gdk.Rectangle): gboolean",
    "child_attached!HandleBox!1!(self: HandleBox; widget: Widget)!(self: ptr HandleBox00; widget: ptr Widget00)",
    "child_detached!HandleBox!1!(self: HandleBox; widget: Widget)!(self: ptr HandleBox00; widget: ptr Widget00)",
    "plug_removed!Socket!0!(self: Socket): bool!(self: ptr Socket00): gboolean",
    "location_popup!FileChooserWidget!1!(self: FileChooserWidget; path: cstring)!(self: ptr FileChooserWidget00; path: cstring)",
    "quick_bookmark!FileChooserWidget!1!(self: FileChooserWidget; bookmarkIndex: int)!(self: ptr FileChooserWidget00; bookmarkIndex: int32)",
    "expand_collapse_cursor_row!TreeView!3!(self: TreeView; `object`: bool; p0: bool; p1: bool): bool!(self: ptr TreeView00; `object`: gboolean; p0: gboolean; p1: gboolean): gboolean",
    "move_cursor!TreeView!2!(self: TreeView; step: MovementStep; direction: int): bool!(self: ptr TreeView00; step: MovementStep; direction: int32): gboolean",
    "row_activated!TreeView!2!(self: TreeView; path: TreePath; column: TreeViewColumn)!(self: ptr TreeView00; path: ptr TreePath00; column: ptr TreeViewColumn00)",
    "row_collapsed!TreeView!2!(self: TreeView; iter: TreeIter; path: TreePath)!(self: ptr TreeView00; iter: TreeIter; path: ptr TreePath00)",
    "row_expanded!TreeView!2!(self: TreeView; iter: TreeIter; path: TreePath)!(self: ptr TreeView00; iter: TreeIter; path: ptr TreePath00)",
    "select_all!TreeView!0!(self: TreeView): bool!(self: ptr TreeView00): gboolean",
    "select_cursor_parent!TreeView!0!(self: TreeView): bool!(self: ptr TreeView00): gboolean",
    "select_cursor_row!TreeView!1!(self: TreeView; `object`: bool): bool!(self: ptr TreeView00; `object`: gboolean): gboolean",
    "start_interactive_search!TreeView!0!(self: TreeView): bool!(self: ptr TreeView00): gboolean",
    "test_collapse_row!TreeView!2!(self: TreeView; iter: TreeIter; path: TreePath): bool!(self: ptr TreeView00; iter: TreeIter; path: ptr TreePath00): gboolean",
    "test_expand_row!TreeView!2!(self: TreeView; iter: TreeIter; path: TreePath): bool!(self: ptr TreeView00; iter: TreeIter; path: ptr TreePath00): gboolean",
    "toggle_cursor_row!TreeView!0!(self: TreeView): bool!(self: ptr TreeView00): gboolean",
    "unselect_all!TreeView!0!(self: TreeView): bool!(self: ptr TreeView00): gboolean",
    "create_context!GLArea!0!(self: GLArea): gdk.GLContext!(self: ptr GLArea00): gdk.GLContext00",
    "render!GLArea!1!(self: GLArea; context: gdk.GLContext): bool!(self: ptr GLArea00; context: ptr gdk.GLContext00): gboolean",
    "resize!GLArea!2!(self: GLArea; width: int; height: int)!(self: ptr GLArea00; width: int32; height: int32)",
    "move_cursor!ListBox!2!(self: ListBox; `object`: MovementStep; p0: int)!(self: ptr ListBox00; `object`: MovementStep; p0: int32)",
    "row_activated!ListBox!1!(self: ListBox; row: ListBoxRow)!(self: ptr ListBox00; row: ptr ListBoxRow00)",
    "row_selected!ListBox!1!(self: ListBox; row: ListBoxRow = nil)!(self: ptr ListBox00; row: ptr ListBoxRow00)",
    "move!HSV!1!(self: HSV; `object`: DirectionType)!(self: ptr HSV00; `object`: DirectionType)",
    "offset_changed!LevelBar!1!(self: LevelBar; name: cstring)!(self: ptr LevelBar00; name: cstring)",
    "response!InfoBar!1!(self: InfoBar; responseId: int)!(self: ptr InfoBar00; responseId: int32)",
    "edited!CellRendererText!2!(self: CellRendererText; path: cstring; newText: cstring)!(self: ptr CellRendererText00; path: cstring; newText: cstring)",
    "accel_cleared!CellRendererAccel!1!(self: CellRendererAccel; pathString: cstring)!(self: ptr CellRendererAccel00; pathString: cstring)",
    "accel_edited!CellRendererAccel!4!(self: CellRendererAccel; pathString: cstring; accelKey: int; accelMods: gdk.ModifierType; hardwareKeycode: int)!(self: ptr CellRendererAccel00; pathString: cstring; accelKey: uint32; accelMods: gdk.ModifierType; hardwareKeycode: uint32)",
    "changed!CellRendererCombo!2!(self: CellRendererCombo; pathString: cstring; newIter: TreeIter)!(self: ptr CellRendererCombo00; pathString: cstring; newIter: TreeIter)",
    "toggled!CellRendererToggle!1!(self: CellRendererToggle; path: cstring)!(self: ptr CellRendererToggle00; path: cstring)",
    "color_activated!ColorChooser!1!(self: ColorChooser | ColorButton | ColorChooserDialog | ColorChooserWidget; color: gdk.RGBA)!(self: ptr ColorChooser00; color: gdk.RGBA)",
    "delete_text!Editable!2!(self: Editable | SpinButton | Entry | SearchEntry; startPos: int; endPos: int)!(self: ptr Editable00; startPos: int32; endPos: int32)",
    "insert_text!Editable!3!(self: Editable | SpinButton | Entry | SearchEntry; newText: cstring; newTextLength: int; position: var int)!(self: ptr Editable00; newText: cstring; newTextLength: int32; position: var int32)",
    "key_pressed!EventControllerKey!3!(self: EventControllerKey; keyval: int; keycode: int; state: gdk.ModifierType): bool!(self: ptr EventControllerKey00; keyval: uint32; keycode: uint32; state: gdk.ModifierType): gboolean",
    "key_released!EventControllerKey!3!(self: EventControllerKey; keyval: int; keycode: int; state: gdk.ModifierType)!(self: ptr EventControllerKey00; keyval: uint32; keycode: uint32; state: gdk.ModifierType)",
    "modifiers!EventControllerKey!1!(self: EventControllerKey; `object`: gdk.ModifierType): bool!(self: ptr EventControllerKey00; `object`: gdk.ModifierType): gboolean",
    "commit!IMContext!1!(self: IMContext; str: cstring)!(self: ptr IMContext00; str: cstring)",
    "delete_surrounding!IMContext!2!(self: IMContext; offset: int; nChars: int): bool!(self: ptr IMContext00; offset: int32; nChars: int32): gboolean",
    "retrieve_surrounding!IMContext!0!(self: IMContext): bool!(self: ptr IMContext00): gboolean",
    "enter!EventControllerMotion!2!(self: EventControllerMotion; x: cdouble; y: cdouble)!(self: ptr EventControllerMotion00; x: cdouble; y: cdouble)",
    "motion!EventControllerMotion!2!(self: EventControllerMotion; x: cdouble; y: cdouble)!(self: ptr EventControllerMotion00; x: cdouble; y: cdouble)",
    "decelerate!EventControllerScroll!2!(self: EventControllerScroll; velX: cdouble; velY: cdouble)!(self: ptr EventControllerScroll00; velX: cdouble; velY: cdouble)",
    "scroll!EventControllerScroll!2!(self: EventControllerScroll; dx: cdouble; dy: cdouble)!(self: ptr EventControllerScroll00; dx: cdouble; dy: cdouble)",
    "response!NativeDialog!1!(self: NativeDialog; responseId: int)!(self: ptr NativeDialog00; responseId: int32)",
    "confirm_overwrite!FileChooser!0!(self: FileChooser | FileChooserButton | FileChooserNative | FileChooserWidget | FileChooserDialog): FileChooserConfirmation!(self: ptr FileChooser00): FileChooserConfirmation",
    "font_activated!FontChooser!1!(self: FontChooser | FontChooserWidget | FontChooserDialog | FontButton; fontname: cstring)!(self: ptr FontChooser00; fontname: cstring)",
    "begin!Gesture!1!(self: Gesture; sequence: gdk.EventSequence)!(self: ptr Gesture00; sequence: ptr gdk.EventSequence00)",
    "cancel!Gesture!1!(self: Gesture; sequence: gdk.EventSequence)!(self: ptr Gesture00; sequence: ptr gdk.EventSequence00)",
    "end!Gesture!1!(self: Gesture; sequence: gdk.EventSequence)!(self: ptr Gesture00; sequence: ptr gdk.EventSequence00)",
    "sequence_state_changed!Gesture!2!(self: Gesture; sequence: gdk.EventSequence; state: EventSequenceState)!(self: ptr Gesture00; sequence: ptr gdk.EventSequence00; state: EventSequenceState)",
    "update!Gesture!1!(self: Gesture; sequence: gdk.EventSequence)!(self: ptr Gesture00; sequence: ptr gdk.EventSequence00)",
    "drag_begin!GestureDrag!2!(self: GestureDrag; startX: cdouble; startY: cdouble)!(self: ptr GestureDrag00; startX: cdouble; startY: cdouble)",
    "drag_end!GestureDrag!2!(self: GestureDrag; offsetX: cdouble; offsetY: cdouble)!(self: ptr GestureDrag00; offsetX: cdouble; offsetY: cdouble)",
    "drag_update!GestureDrag!2!(self: GestureDrag; offsetX: cdouble; offsetY: cdouble)!(self: ptr GestureDrag00; offsetX: cdouble; offsetY: cdouble)",
    "pressed!GestureLongPress!2!(self: GestureLongPress; x: cdouble; y: cdouble)!(self: ptr GestureLongPress00; x: cdouble; y: cdouble)",
    "pressed!GestureMultiPress!3!(self: GestureMultiPress; nPress: int; x: cdouble; y: cdouble)!(self: ptr GestureMultiPress00; nPress: int32; x: cdouble; y: cdouble)",
    "released!GestureMultiPress!3!(self: GestureMultiPress; nPress: int; x: cdouble; y: cdouble)!(self: ptr GestureMultiPress00; nPress: int32; x: cdouble; y: cdouble)",
    "pan!GesturePan!2!(self: GesturePan; direction: PanDirection; offset: cdouble)!(self: ptr GesturePan00; direction: PanDirection; offset: cdouble)",
    "angle_changed!GestureRotate!2!(self: GestureRotate; angle: cdouble; angleDelta: cdouble)!(self: ptr GestureRotate00; angle: cdouble; angleDelta: cdouble)",
    "down!GestureStylus!2!(self: GestureStylus; `object`: cdouble; p0: cdouble)!(self: ptr GestureStylus00; `object`: cdouble; p0: cdouble)",
    "motion!GestureStylus!2!(self: GestureStylus; `object`: cdouble; p0: cdouble)!(self: ptr GestureStylus00; `object`: cdouble; p0: cdouble)",
    "proximity!GestureStylus!2!(self: GestureStylus; `object`: cdouble; p0: cdouble)!(self: ptr GestureStylus00; `object`: cdouble; p0: cdouble)",
    "up!GestureStylus!2!(self: GestureStylus; `object`: cdouble; p0: cdouble)!(self: ptr GestureStylus00; `object`: cdouble; p0: cdouble)",
    "swipe!GestureSwipe!2!(self: GestureSwipe; velocityX: cdouble; velocityY: cdouble)!(self: ptr GestureSwipe00; velocityX: cdouble; velocityY: cdouble)",
    "scale_changed!GestureZoom!1!(self: GestureZoom; scale: cdouble)!(self: ptr GestureZoom00; scale: cdouble)",
    "got_page_size!PrintOperationPreview!2!(self: PrintOperationPreview | PrintOperation; context: PrintContext; pageSetup: PageSetup)!(self: ptr PrintOperationPreview00; context: ptr PrintContext00; pageSetup: ptr PageSetup00)",
    "ready!PrintOperationPreview!1!(self: PrintOperationPreview | PrintOperation; context: PrintContext)!(self: ptr PrintOperationPreview00; context: ptr PrintContext00)",
    "begin_print!PrintOperation!1!(self: PrintOperation; context: PrintContext)!(self: ptr PrintOperation00; context: ptr PrintContext00)",
    "create_custom_widget!PrintOperation!0!(self: PrintOperation): gobject.Object!(self: ptr PrintOperation00): gobject.Object00",
    "custom_widget_apply!PrintOperation!1!(self: PrintOperation; widget: Widget)!(self: ptr PrintOperation00; widget: ptr Widget00)",
    "done!PrintOperation!1!(self: PrintOperation; resu: PrintOperationResult)!(self: ptr PrintOperation00; resu: PrintOperationResult)",
    "draw_page!PrintOperation!2!(self: PrintOperation; context: PrintContext; pageNr: int)!(self: ptr PrintOperation00; context: ptr PrintContext00; pageNr: int32)",
    "end_print!PrintOperation!1!(self: PrintOperation; context: PrintContext)!(self: ptr PrintOperation00; context: ptr PrintContext00)",
    "paginate!PrintOperation!1!(self: PrintOperation; context: PrintContext): bool!(self: ptr PrintOperation00; context: ptr PrintContext00): gboolean",
    "preview!PrintOperation!3!(self: PrintOperation; preview: PrintOperationPreview | PrintOperation; context: PrintContext; parent: Window = nil): bool!(self: ptr PrintOperation00; preview: ptr PrintOperationPreview00; context: ptr PrintContext00; parent: ptr Window00): gboolean",
    "request_page_setup!PrintOperation!3!(self: PrintOperation; context: PrintContext; pageNr: int; setup: PageSetup)!(self: ptr PrintOperation00; context: ptr PrintContext00; pageNr: int32; setup: ptr PageSetup00)",
    "update_custom_widget!PrintOperation!3!(self: PrintOperation; widget: Widget; setup: PageSetup; settings: PrintSettings)!(self: ptr PrintOperation00; widget: ptr Widget00; setup: ptr PageSetup00; settings: ptr PrintSettings00)",
    "button_press_event!StatusIcon!1!(self: StatusIcon; event: gdk.EventButton): bool!(self: ptr StatusIcon00; event: ptr gdk.EventButton00): gboolean",
    "button_release_event!StatusIcon!1!(self: StatusIcon; event: gdk.EventButton): bool!(self: ptr StatusIcon00; event: ptr gdk.EventButton00): gboolean",
    "popup_menu!StatusIcon!2!(self: StatusIcon; button: int; activateTime: int)!(self: ptr StatusIcon00; button: uint32; activateTime: uint32)",
    "query_tooltip!StatusIcon!4!(self: StatusIcon; x: int; y: int; keyboardMode: bool; tooltip: Tooltip): bool!(self: ptr StatusIcon00; x: int32; y: int32; keyboardMode: gboolean; tooltip: ptr Tooltip00): gboolean",
    "scroll_event!StatusIcon!1!(self: StatusIcon; event: gdk.EventScroll): bool!(self: ptr StatusIcon00; event: ptr gdk.EventScroll00): gboolean",
    "size_changed!StatusIcon!1!(self: StatusIcon; size: int): bool!(self: ptr StatusIcon00; size: int32): gboolean",
    "tool_changed!Device!1!(self: Device; tool: DeviceTool)!(self: ptr Device00; tool: ptr DeviceTool00)",
    "device_added!Seat!1!(self: Seat; device: Device)!(self: ptr Seat00; device: ptr Device00)",
    "device_removed!Seat!1!(self: Seat; device: Device)!(self: ptr Seat00; device: ptr Device00)",
    "tool_added!Seat!1!(self: Seat; tool: DeviceTool)!(self: ptr Seat00; tool: ptr DeviceTool00)",
    "tool_removed!Seat!1!(self: Seat; tool: DeviceTool)!(self: ptr Seat00; tool: ptr DeviceTool00)",
    "closed!Display!1!(self: Display; isError: bool)!(self: ptr Display00; isError: gboolean)",
    "monitor_added!Display!1!(self: Display; monitor: Monitor)!(self: ptr Display00; monitor: ptr Monitor00)",
    "monitor_removed!Display!1!(self: Display; monitor: Monitor)!(self: ptr Display00; monitor: ptr Monitor00)",
    "seat_added!Display!1!(self: Display; seat: Seat)!(self: ptr Display00; seat: ptr Seat00)",
    "seat_removed!Display!1!(self: Display; seat: Seat)!(self: ptr Display00; seat: ptr Seat00)",
    "device_added!DeviceManager!1!(self: DeviceManager; device: Device)!(self: ptr DeviceManager00; device: ptr Device00)",
    "device_changed!DeviceManager!1!(self: DeviceManager; device: Device)!(self: ptr DeviceManager00; device: ptr Device00)",
    "device_removed!DeviceManager!1!(self: DeviceManager; device: Device)!(self: ptr DeviceManager00; device: ptr Device00)",
    "create_surface!Window!2!(self: Window; width: int; height: int): cairo.Surface!(self: ptr Window00; width: int32; height: int32): cairo.Surface00",
    "from_embedder!Window!4!(self: Window; embedderX: cdouble; embedderY: cdouble; offscreenX: var cdouble; offscreenY: var cdouble)!(self: ptr Window00; embedderX: cdouble; embedderY: cdouble; offscreenX: var cdouble; offscreenY: var cdouble)",
    "moved_to_rect!Window!4!(self: Window; flippedRect: pointer; finalRect: pointer; flippedX: bool; flippedY: bool)!(self: ptr Window00; flippedRect: pointer; finalRect: pointer; flippedX: gboolean; flippedY: gboolean)",
    "pick_embedded_child!Window!2!(self: Window; x: cdouble; y: cdouble): Window!(self: ptr Window00; x: cdouble; y: cdouble): Window00",
    "to_embedder!Window!4!(self: Window; offscreenX: cdouble; offscreenY: cdouble; embedderX: var cdouble; embedderY: var cdouble)!(self: ptr Window00; offscreenX: cdouble; offscreenY: cdouble; embedderX: var cdouble; embedderY: var cdouble)",
    "display_opened!DisplayManager!1!(self: DisplayManager; display: Display)!(self: ptr DisplayManager00; display: ptr Display00)",
    "action_changed!DragContext!1!(self: DragContext; action: DragAction)!(self: ptr DragContext00; action: DragAction)",
    "cancel!DragContext!1!(self: DragContext; reason: DragCancelReason)!(self: ptr DragContext00; reason: DragCancelReason)",
    "drop_performed!DragContext!1!(self: DragContext; time: int)!(self: ptr DragContext00; time: int32)",
    "activate!SimpleAction!1!(self: SimpleAction; parameter: glib.Variant = nil)!(self: ptr SimpleAction00; parameter: ptr glib.Variant00)",
    "change_state!SimpleAction!1!(self: SimpleAction; value: glib.Variant = nil)!(self: ptr SimpleAction00; value: ptr glib.Variant00)",
    "command_line!GApplication!1!(self: GApplication; commandLine: ApplicationCommandLine): int!(self: ptr GApplication00; commandLine: ptr ApplicationCommandLine00): int32",
    "handle_local_options!GApplication!1!(self: GApplication; options: glib.VariantDict): int!(self: ptr GApplication00; options: ptr glib.VariantDict00): int32",
    "name_lost!GApplication!0!(self: GApplication): bool!(self: ptr GApplication00): gboolean",
    "open!GApplication!3!(self: GApplication; files: GFile00Array; nFiles: int; hint: cstring)!(self: ptr GApplication00; files: GFile00Array; nFiles: int32; hint: cstring)",
    "action_added!ActionGroup!1!(self: ActionGroup | GApplication | DBusActionGroup | SimpleActionGroup; actionName: cstring)!(self: ptr ActionGroup00; actionName: cstring)",
    "action_enabled_changed!ActionGroup!2!(self: ActionGroup | GApplication | DBusActionGroup | SimpleActionGroup; actionName: cstring; enabled: bool)!(self: ptr ActionGroup00; actionName: cstring; enabled: gboolean)",
    "action_removed!ActionGroup!1!(self: ActionGroup | GApplication | DBusActionGroup | SimpleActionGroup; actionName: cstring)!(self: ptr ActionGroup00; actionName: cstring)",
    "action_state_changed!ActionGroup!2!(self: ActionGroup | GApplication | DBusActionGroup | SimpleActionGroup; actionName: cstring; value: glib.Variant)!(self: ptr ActionGroup00; actionName: cstring; value: ptr glib.Variant00)",
    "ask_password!MountOperation!4!(self: MountOperation; message: cstring; defaultUser: cstring; defaultDomain: cstring; flags: AskPasswordFlags)!(self: ptr MountOperation00; message: cstring; defaultUser: cstring; defaultDomain: cstring; flags: AskPasswordFlags)",
    "ask_question!MountOperation!2!(self: MountOperation; message: cstring; choices: varargs[string, `$`])!(self: ptr MountOperation00; message: cstring; choices: cstringArray)",
    "reply!MountOperation!1!(self: MountOperation; resu: MountOperationResult)!(self: ptr MountOperation00; resu: MountOperationResult)",
    "show_processes!MountOperation!3!(self: MountOperation; message: cstring; processes: ptr GArray00; choices: varargs[string, `$`])!(self: ptr MountOperation00; message: cstring; processes: ptr GArray00; choices: cstringArray)",
    "show_unmount_progress!MountOperation!3!(self: MountOperation; message: cstring; timeLeft: int64; bytesLeft: int64)!(self: ptr MountOperation00; message: cstring; timeLeft: int64; bytesLeft: int64)",
    "launch_failed!AppLaunchContext!1!(self: AppLaunchContext; startupNotifyId: cstring)!(self: ptr AppLaunchContext00; startupNotifyId: cstring)",
    "launched!AppLaunchContext!2!(self: AppLaunchContext; info: AppInfo | DesktopAppInfo; platformData: glib.Variant)!(self: ptr AppLaunchContext00; info: ptr AppInfo00; platformData: ptr glib.Variant00)",
    "closed!DBusConnection!2!(self: DBusConnection; remotePeerVanished: bool; error: ptr glib.Error)!(self: ptr DBusConnection00; remotePeerVanished: gboolean; error: ptr glib.Error)",
    "items_changed!MenuModel!3!(self: MenuModel; position: int; removed: int; added: int)!(self: ptr MenuModel00; position: int32; removed: int32; added: int32)",
    "allow_mechanism!DBusAuthObserver!1!(self: DBusAuthObserver; mechanism: cstring): bool!(self: ptr DBusAuthObserver00; mechanism: cstring): gboolean",
    "authorize_authenticated_peer!DBusAuthObserver!2!(self: DBusAuthObserver; stream: IOStream; credentials: Credentials = nil): bool!(self: ptr DBusAuthObserver00; stream: ptr IOStream00; credentials: ptr Credentials00): gboolean",
    "changed!FileMonitor!3!(self: FileMonitor; file: GFile; otherFile: GFile = nil; eventType: FileMonitorEvent)!(self: ptr FileMonitor00; file: ptr GFile00; otherFile: ptr GFile00; eventType: FileMonitorEvent)",
    "g_properties_changed!DBusProxy!2!(self: DBusProxy; changedProperties: glib.Variant; invalidatedProperties: varargs[string, `$`])!(self: ptr DBusProxy00; changedProperties: ptr glib.Variant00; invalidatedProperties: cstringArray)",
    "g_signal!DBusProxy!3!(self: DBusProxy; senderName: cstring = \"\"; signalName: cstring; parameters: glib.Variant)!(self: ptr DBusProxy00; senderName: cstring; signalName: cstring; parameters: ptr glib.Variant00)",
    "interface_proxy_properties_changed!DBusObjectManagerClient!4!(self: DBusObjectManagerClient; objectProxy: DBusObjectProxy; interfaceProxy: DBusProxy; changedProperties: glib.Variant; invalidatedProperties: varargs[string, `$`])!(self: ptr DBusObjectManagerClient00; objectProxy: ptr DBusObjectProxy00; interfaceProxy: ptr DBusProxy00; changedProperties: ptr glib.Variant00; invalidatedProperties: cstringArray)",
    "interface_proxy_signal!DBusObjectManagerClient!5!(self: DBusObjectManagerClient; objectProxy: DBusObjectProxy; interfaceProxy: DBusProxy; senderName: cstring; signalName: cstring; parameters: glib.Variant)!(self: ptr DBusObjectManagerClient00; objectProxy: ptr DBusObjectProxy00; interfaceProxy: ptr DBusProxy00; senderName: cstring; signalName: cstring; parameters: ptr glib.Variant00)",
    "g_authorize_method!DBusInterfaceSkeleton!1!(self: DBusInterfaceSkeleton; invocation: DBusMethodInvocation): bool!(self: ptr DBusInterfaceSkeleton00; invocation: ptr DBusMethodInvocation00): gboolean",
    "authorize_method!DBusObjectSkeleton!2!(self: DBusObjectSkeleton; `interface`: DBusInterfaceSkeleton; invocation: DBusMethodInvocation): bool!(self: ptr DBusObjectSkeleton00; `interface`: ptr DBusInterfaceSkeleton00; invocation: ptr DBusMethodInvocation00): gboolean",
    "interface_added!DBusObject!1!(self: DBusObject | DBusObjectSkeleton | DBusObjectProxy; `interface`: DBusInterface | DBusInterfaceSkeleton | DBusProxy)!(self: ptr DBusObject00; `interface`: ptr DBusInterface00)",
    "interface_removed!DBusObject!1!(self: DBusObject | DBusObjectSkeleton | DBusObjectProxy; `interface`: DBusInterface | DBusInterfaceSkeleton | DBusProxy)!(self: ptr DBusObject00; `interface`: ptr DBusInterface00)",
    "interface_added!DBusObjectManager!2!(self: DBusObjectManager | DBusObjectManagerClient | DBusObjectManagerServer; `object`: DBusObject | DBusObjectSkeleton | DBusObjectProxy; `interface`: DBusInterface | DBusInterfaceSkeleton | DBusProxy)!(self: ptr DBusObjectManager00; `object`: ptr DBusObject00; `interface`: ptr DBusInterface00)",
    "interface_removed!DBusObjectManager!2!(self: DBusObjectManager | DBusObjectManagerClient | DBusObjectManagerServer; `object`: DBusObject | DBusObjectSkeleton | DBusObjectProxy; `interface`: DBusInterface | DBusInterfaceSkeleton | DBusProxy)!(self: ptr DBusObjectManager00; `object`: ptr DBusObject00; `interface`: ptr DBusInterface00)",
    "object_added!DBusObjectManager!1!(self: DBusObjectManager | DBusObjectManagerClient | DBusObjectManagerServer; `object`: DBusObject | DBusObjectSkeleton | DBusObjectProxy)!(self: ptr DBusObjectManager00; `object`: ptr DBusObject00)",
    "object_removed!DBusObjectManager!1!(self: DBusObjectManager | DBusObjectManagerClient | DBusObjectManagerServer; `object`: DBusObject | DBusObjectSkeleton | DBusObjectProxy)!(self: ptr DBusObjectManager00; `object`: ptr DBusObject00)",
    "new_connection!DBusServer!1!(self: DBusServer; connection: DBusConnection): bool!(self: ptr DBusServer00; connection: ptr DBusConnection00): gboolean",
    "accept_certificate!DtlsConnection!2!(self: DtlsConnection; peerCert: TlsCertificate; errors: TlsCertificateFlags): bool!(self: ptr DtlsConnection00; peerCert: ptr TlsCertificate00; errors: TlsCertificateFlags): gboolean",
    "accept_certificate!TlsConnection!2!(self: TlsConnection; peerCert: TlsCertificate; errors: TlsCertificateFlags): bool!(self: ptr TlsConnection00; peerCert: ptr TlsCertificate00; errors: TlsCertificateFlags): gboolean",
    "items_changed!ListModel!3!(self: ListModel | ListStore; position: int; removed: int; added: int)!(self: ptr ListModel00; position: uint32; removed: uint32; added: uint32)",
    "low_memory_warning!MemoryMonitor!1!(self: MemoryMonitor; level: MemoryMonitorWarningLevel)!(self: ptr MemoryMonitor00; level: MemoryMonitorWarningLevel)",
    "drive_changed!VolumeMonitor!1!(self: VolumeMonitor; drive: Drive)!(self: ptr VolumeMonitor00; drive: ptr Drive00)",
    "drive_connected!VolumeMonitor!1!(self: VolumeMonitor; drive: Drive)!(self: ptr VolumeMonitor00; drive: ptr Drive00)",
    "drive_disconnected!VolumeMonitor!1!(self: VolumeMonitor; drive: Drive)!(self: ptr VolumeMonitor00; drive: ptr Drive00)",
    "drive_eject_button!VolumeMonitor!1!(self: VolumeMonitor; drive: Drive)!(self: ptr VolumeMonitor00; drive: ptr Drive00)",
    "drive_stop_button!VolumeMonitor!1!(self: VolumeMonitor; drive: Drive)!(self: ptr VolumeMonitor00; drive: ptr Drive00)",
    "mount_added!VolumeMonitor!1!(self: VolumeMonitor; mount: Mount)!(self: ptr VolumeMonitor00; mount: ptr Mount00)",
    "mount_changed!VolumeMonitor!1!(self: VolumeMonitor; mount: Mount)!(self: ptr VolumeMonitor00; mount: ptr Mount00)",
    "mount_pre_unmount!VolumeMonitor!1!(self: VolumeMonitor; mount: Mount)!(self: ptr VolumeMonitor00; mount: ptr Mount00)",
    "mount_removed!VolumeMonitor!1!(self: VolumeMonitor; mount: Mount)!(self: ptr VolumeMonitor00; mount: ptr Mount00)",
    "volume_added!VolumeMonitor!1!(self: VolumeMonitor; volume: Volume)!(self: ptr VolumeMonitor00; volume: ptr Volume00)",
    "volume_changed!VolumeMonitor!1!(self: VolumeMonitor; volume: Volume)!(self: ptr VolumeMonitor00; volume: ptr Volume00)",
    "volume_removed!VolumeMonitor!1!(self: VolumeMonitor; volume: Volume)!(self: ptr VolumeMonitor00; volume: ptr Volume00)",
    "network_changed!NetworkMonitor!1!(self: NetworkMonitor; networkAvailable: bool)!(self: ptr NetworkMonitor00; networkAvailable: gboolean)",
    "change_event!Settings!2!(self: Settings; keys: seq[uint32]): bool!(self: ptr Settings00; keys: uint32Array; nKeys: int32): gboolean",
    "changed!Settings!1!(self: Settings; key: cstring)!(self: ptr Settings00; key: cstring)",
    "writable_change_event!Settings!1!(self: Settings; key: int): bool!(self: ptr Settings00; key: uint32): gboolean",
    "writable_changed!Settings!1!(self: Settings; key: cstring)!(self: ptr Settings00; key: cstring)",
    "event!SocketClient!3!(self: SocketClient; event: SocketClientEvent; connectable: SocketConnectable | SocketAddress | NativeSocketAddress | UnixSocketAddress | NetworkService | ProxyAddress | InetSocketAddress | NetworkAddress; connection: IOStream = nil)!(self: ptr SocketClient00; event: SocketClientEvent; connectable: ptr SocketConnectable00; connection: ptr IOStream00)",
    "event!SocketListener!2!(self: SocketListener; event: SocketListenerEvent; socket: Socket)!(self: ptr SocketListener00; event: SocketListenerEvent; socket: ptr Socket00)",
    "incoming!SocketService!2!(self: SocketService; connection: SocketConnection; sourceObject: gobject.Object = nil): bool!(self: ptr SocketService00; connection: ptr SocketConnection00; sourceObject: ptr gobject.Object00): gboolean",
    "run!ThreadedSocketService!2!(self: ThreadedSocketService; connection: SocketConnection; sourceObject: gobject.Object): bool!(self: ptr ThreadedSocketService00; connection: ptr SocketConnection00; sourceObject: ptr gobject.Object00): gboolean",
    "area_updated!PixbufLoader!4!(self: PixbufLoader; x: int; y: int; width: int; height: int)!(self: ptr PixbufLoader00; x: int32; y: int32; width: int32; height: int32)",
    "size_prepared!PixbufLoader!2!(self: PixbufLoader; width: int; height: int)!(self: ptr PixbufLoader00; width: int32; height: int32)",
    "bracket_matched!Buffer!2!(self: Buffer; iter: gtk.TextIter; state: BracketMatchType)!(self: ptr Buffer00; iter: gtk.TextIter; state: BracketMatchType)",
    "highlight_updated!Buffer!2!(self: Buffer; start: gtk.TextIter; `end`: gtk.TextIter)!(self: ptr Buffer00; start: gtk.TextIter; `end`: gtk.TextIter)",
    "source_mark_updated!Buffer!1!(self: Buffer; mark: gtk.TextMark)!(self: ptr Buffer00; mark: ptr gtk.TextMark00)",
    "move_cursor!Completion!2!(self: Completion; step: gtk.ScrollStep; num: int)!(self: ptr Completion00; step: gtk.ScrollStep; num: int32)",
    "move_page!Completion!2!(self: Completion; step: gtk.ScrollStep; num: int)!(self: ptr Completion00; step: gtk.ScrollStep; num: int32)",
    "populate_context!Completion!1!(self: Completion; context: CompletionContext)!(self: ptr Completion00; context: ptr CompletionContext00)",
    "change_case!View!1!(self: View; caseType: ChangeCaseType)!(self: ptr View00; caseType: ChangeCaseType)",
    "change_number!View!1!(self: View; count: int)!(self: ptr View00; count: int32)",
    "line_mark_activated!View!2!(self: View; iter: gtk.TextIter; event: gdk.Event)!(self: ptr View00; iter: gtk.TextIter; event: ptr gdk.Event00)",
    "move_lines!View!1!(self: View; down: bool)!(self: ptr View00; down: gboolean)",
    "move_to_matching_bracket!View!1!(self: View; extendSelection: bool)!(self: ptr View00; extendSelection: gboolean)",
    "move_words!View!1!(self: View; count: int)!(self: ptr View00; count: int32)",
    "smart_home_end!View!2!(self: View; iter: gtk.TextIter; count: int)!(self: ptr View00; iter: gtk.TextIter; count: int32)",
    "activate!GutterRenderer!3!(self: GutterRenderer; iter: gtk.TextIter; area: gdk.Rectangle; event: gdk.Event)!(self: ptr GutterRenderer00; iter: gtk.TextIter; area: gdk.Rectangle; event: ptr gdk.Event00)",
    "query_activatable!GutterRenderer!3!(self: GutterRenderer; iter: gtk.TextIter; area: gdk.Rectangle; event: gdk.Event): bool!(self: ptr GutterRenderer00; iter: gtk.TextIter; area: gdk.Rectangle; event: ptr gdk.Event00): gboolean",
    "query_data!GutterRenderer!3!(self: GutterRenderer; start: gtk.TextIter; `end`: gtk.TextIter; state: GutterRendererState)!(self: ptr GutterRenderer00; start: gtk.TextIter; `end`: gtk.TextIter; state: GutterRendererState)",
    "query_tooltip!GutterRenderer!5!(self: GutterRenderer; iter: gtk.TextIter; area: gdk.Rectangle; x: int; y: int; tooltip: gtk.Tooltip): bool!(self: ptr GutterRenderer00; iter: gtk.TextIter; area: gdk.Rectangle; x: int32; y: int32; tooltip: ptr gtk.Tooltip00): gboolean",
    "query_tooltip_markup!MarkAttributes!1!(self: MarkAttributes; mark: Mark): string!(self: ptr MarkAttributes00; mark: ptr Mark00): cstring",
    "query_tooltip_text!MarkAttributes!1!(self: MarkAttributes; mark: Mark): string!(self: ptr MarkAttributes00; mark: ptr Mark00): cstring",
    "active_descendant_changed!Object!1!(self: Object; arg1: Object)!(self: ptr Object00; arg1: ptr ptr Object00)",
    "children_changed!Object!2!(self: Object; arg1: int; arg2: Object)!(self: ptr Object00; arg1: uint32; arg2: ptr ptr Object00)",
    "focus_event!Object!1!(self: Object; arg1: bool)!(self: ptr Object00; arg1: gboolean)",
    "property_change!Object!1!(self: Object; arg1: PropertyValues)!(self: ptr Object00; arg1: ptr ptr PropertyValues00)",
    "state_change!Object!2!(self: Object; arg1: cstring; arg2: bool)!(self: ptr Object00; arg1: cstring; arg2: gboolean)",
    "bounds_changed!Component!1!(self: Component | NoOpObject | Plug | Socket; arg1: Rectangle)!(self: ptr Component00; arg1: Rectangle)",
    "page_changed!Document!1!(self: Document | NoOpObject; pageNumber: int)!(self: ptr Document00; pageNumber: int32)",
    "link_selected!Hypertext!1!(self: Hypertext | NoOpObject; arg1: int)!(self: ptr Hypertext00; arg1: int32)",
    "column_deleted!Table!2!(self: Table | NoOpObject; arg1: int; arg2: int)!(self: ptr Table00; arg1: int32; arg2: int32)",
    "column_inserted!Table!2!(self: Table | NoOpObject; arg1: int; arg2: int)!(self: ptr Table00; arg1: int32; arg2: int32)",
    "row_deleted!Table!2!(self: Table | NoOpObject; arg1: int; arg2: int)!(self: ptr Table00; arg1: int32; arg2: int32)",
    "row_inserted!Table!2!(self: Table | NoOpObject; arg1: int; arg2: int)!(self: ptr Table00; arg1: int32; arg2: int32)",
    "text_caret_moved!Text!1!(self: Text | NoOpObject; arg1: int)!(self: ptr Text00; arg1: int32)",
    "text_changed!Text!2!(self: Text | NoOpObject; arg1: int; arg2: int)!(self: ptr Text00; arg1: int32; arg2: int32)",
    "text_insert!Text!3!(self: Text | NoOpObject; arg1: int; arg2: int; arg3: cstring)!(self: ptr Text00; arg1: int32; arg2: int32; arg3: cstring)",
    "text_remove!Text!3!(self: Text | NoOpObject; arg1: int; arg2: int; arg3: cstring)!(self: ptr Text00; arg1: int32; arg2: int32; arg3: cstring)",
    "value_changed!Value!2!(self: Value | NoOpObject; value: cdouble; text: cstring)!(self: ptr Value00; value: cdouble; text: cstring)",
    "char_size_changed!Terminal!2!(self: Terminal; width: int; height: int)!(self: ptr Terminal00; width: uint32; height: uint32)",
    "child_exited!Terminal!1!(self: Terminal; status: int)!(self: ptr Terminal00; status: int32)",
    "commit!Terminal!2!(self: Terminal; text: cstring; size: int)!(self: ptr Terminal00; text: cstring; size: uint32)",
    "hyperlink_hover_uri_changed!Terminal!2!(self: Terminal; uri: cstring; bbox: gdk.Rectangle)!(self: ptr Terminal00; uri: cstring; bbox: gdk.Rectangle)",
    "move_window!Terminal!2!(self: Terminal; x: int; y: int)!(self: ptr Terminal00; x: uint32; y: uint32)",
    "resize_window!Terminal!2!(self: Terminal; width: int; height: int)!(self: ptr Terminal00; width: uint32; height: uint32)",
    "text_scrolled!Terminal!1!(self: Terminal; delta: int)!(self: ptr Terminal00; delta: int32)",
    "deep_notify!Object!2!(self: Object; propObject: Object; prop: gobject.ParamSpec)!(self: ptr Object00; propObject: ptr Object00; prop: ptr gobject.ParamSpec00)",
    "linked!Pad!1!(self: Pad; peer: Pad)!(self: ptr Pad00; peer: ptr Pad00)",
    "unlinked!Pad!1!(self: Pad; peer: Pad)!(self: ptr Pad00; peer: ptr Pad00)",
    "pad_added!Element!1!(self: Element; newPad: Pad)!(self: ptr Element00; newPad: ptr Pad00)",
    "pad_removed!Element!1!(self: Element; oldPad: Pad)!(self: ptr Element00; oldPad: ptr Pad00)",
    "deep_element_added!Bin!2!(self: Bin; subBin: Bin; element: Element)!(self: ptr Bin00; subBin: ptr Bin00; element: ptr Element00)",
    "deep_element_removed!Bin!2!(self: Bin; subBin: Bin; element: Element)!(self: ptr Bin00; subBin: ptr Bin00; element: ptr Element00)",
    "do_latency!Bin!0!(self: Bin): bool!(self: ptr Bin00): gboolean",
    "element_added!Bin!1!(self: Bin; element: Element)!(self: ptr Bin00; element: ptr Element00)",
    "element_removed!Bin!1!(self: Bin; element: Element)!(self: ptr Bin00; element: ptr Element00)",
    "pad_created!PadTemplate!1!(self: PadTemplate; pad: Pad)!(self: ptr PadTemplate00; pad: ptr Pad00)",
    "stream_notify!StreamCollection!2!(self: StreamCollection; `object`: Stream; p0: gobject.ParamSpec)!(self: ptr StreamCollection00; `object`: ptr Stream00; p0: ptr gobject.ParamSpec00)",
    "synced!Clock!1!(self: Clock; synced: bool)!(self: ptr Clock00; synced: gboolean)",
    "child_added!ChildProxy!2!(self: ChildProxy | Pipeline | Bin; `object`: gobject.Object; name: cstring)!(self: ptr ChildProxy00; `object`: ptr gobject.Object00; name: cstring)",
    "child_removed!ChildProxy!2!(self: ChildProxy | Pipeline | Bin; `object`: gobject.Object; name: cstring)!(self: ptr ChildProxy00; `object`: ptr gobject.Object00; name: cstring)",
    "provider_hidden!DeviceProvider!1!(self: DeviceProvider; `object`: cstring)!(self: ptr DeviceProvider00; `object`: cstring)",
    "provider_unhidden!DeviceProvider!1!(self: DeviceProvider; `object`: cstring)!(self: ptr DeviceProvider00; `object`: cstring)",
    "message!Bus!1!(self: Bus; message: Message)!(self: ptr Bus00; message: ptr Message00)",
    "sync_message!Bus!1!(self: Bus; message: Message)!(self: ptr Bus00; message: ptr Message00)",
    "feature_added!Registry!1!(self: Registry; feature: PluginFeature)!(self: ptr Registry00; feature: ptr PluginFeature00)",
    "plugin_added!Registry!1!(self: Registry; plugin: Plugin)!(self: ptr Registry00; plugin: ptr Plugin00)",
  ]
