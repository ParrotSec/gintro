const
  SCA = [
    "button_press_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventButton): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventButton00): gboolean",
    "button_release_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventButton): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventButton00): gboolean",
    "can_activate_accel!gtk.Widget!1!(self: gtk.Widget; signalId: int): bool!(self: ptr gtk.Widget00; signalId: uint32): gboolean",
    "child_notify!gtk.Widget!1!(self: gtk.Widget; childProperty: gobject.ParamSpec)!(self: ptr gtk.Widget00; childProperty: ptr gobject.ParamSpec00)",
    "configure_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventConfigure): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventConfigure00): gboolean",
    "damage_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventExpose): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventExpose00): gboolean",
    "delete_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.Event): bool!(self: ptr gtk.Widget00; event: ptr gdk.Event00): gboolean",
    "destroy_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.Event): bool!(self: ptr gtk.Widget00; event: ptr gdk.Event00): gboolean",
    "direction_changed!gtk.Widget!1!(self: gtk.Widget; previousDirection: gtk.TextDirection)!(self: ptr gtk.Widget00; previousDirection: gtk.TextDirection)",
    "drag_begin!gtk.Widget!1!(self: gtk.Widget; context: gdk.DragContext)!(self: ptr gtk.Widget00; context: ptr gdk.DragContext00)",
    "drag_data_delete!gtk.Widget!1!(self: gtk.Widget; context: gdk.DragContext)!(self: ptr gtk.Widget00; context: ptr gdk.DragContext00)",
    "drag_data_get!gtk.Widget!4!(self: gtk.Widget; context: gdk.DragContext; data: gtk.SelectionData; info: int; time: int)!(self: ptr gtk.Widget00; context: ptr gdk.DragContext00; data: ptr gtk.SelectionData00; info: uint32; time: uint32)",
    "drag_data_received!gtk.Widget!6!(self: gtk.Widget; context: gdk.DragContext; x: int; y: int; data: gtk.SelectionData; info: int; time: int)!(self: ptr gtk.Widget00; context: ptr gdk.DragContext00; x: int32; y: int32; data: ptr gtk.SelectionData00; info: uint32; time: uint32)",
    "drag_drop!gtk.Widget!4!(self: gtk.Widget; context: gdk.DragContext; x: int; y: int; time: int): bool!(self: ptr gtk.Widget00; context: ptr gdk.DragContext00; x: int32; y: int32; time: uint32): gboolean",
    "drag_end!gtk.Widget!1!(self: gtk.Widget; context: gdk.DragContext)!(self: ptr gtk.Widget00; context: ptr gdk.DragContext00)",
    "drag_failed!gtk.Widget!2!(self: gtk.Widget; context: gdk.DragContext; resu: gtk.DragResult): bool!(self: ptr gtk.Widget00; context: ptr gdk.DragContext00; resu: gtk.DragResult): gboolean",
    "drag_leave!gtk.Widget!2!(self: gtk.Widget; context: gdk.DragContext; time: int)!(self: ptr gtk.Widget00; context: ptr gdk.DragContext00; time: uint32)",
    "drag_motion!gtk.Widget!4!(self: gtk.Widget; context: gdk.DragContext; x: int; y: int; time: int): bool!(self: ptr gtk.Widget00; context: ptr gdk.DragContext00; x: int32; y: int32; time: uint32): gboolean",
    "draw!gtk.Widget!1!(self: gtk.Widget; cr: cairo.Context): bool!(self: ptr gtk.Widget00; cr: ptr cairo.Context00): gboolean",
    "enter_notify_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventCrossing): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventCrossing00): gboolean",
    "event!gtk.Widget!1!(self: gtk.Widget; event: gdk.Event): bool!(self: ptr gtk.Widget00; event: ptr gdk.Event00): gboolean",
    "event_after!gtk.Widget!1!(self: gtk.Widget; event: gdk.Event)!(self: ptr gtk.Widget00; event: ptr gdk.Event00)",
    "focus!gtk.Widget!1!(self: gtk.Widget; direction: gtk.DirectionType): bool!(self: ptr gtk.Widget00; direction: gtk.DirectionType): gboolean",
    "focus_in_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventFocus): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventFocus00): gboolean",
    "focus_out_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventFocus): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventFocus00): gboolean",
    "grab_broken_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventGrabBroken): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventGrabBroken00): gboolean",
    "grab_notify!gtk.Widget!1!(self: gtk.Widget; wasGrabbed: bool)!(self: ptr gtk.Widget00; wasGrabbed: gboolean)",
    "hierarchy_changed!gtk.Widget!1!(self: gtk.Widget; previousToplevel: gtk.Widget = nil)!(self: ptr gtk.Widget00; previousToplevel: ptr gtk.Widget00)",
    "key_press_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventKey): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventKey00): gboolean",
    "key_release_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventKey): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventKey00): gboolean",
    "keynav_failed!gtk.Widget!1!(self: gtk.Widget; direction: gtk.DirectionType): bool!(self: ptr gtk.Widget00; direction: gtk.DirectionType): gboolean",
    "leave_notify_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventCrossing): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventCrossing00): gboolean",
    "map_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventAny): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventAny00): gboolean",
    "mnemonic_activate!gtk.Widget!1!(self: gtk.Widget; groupCycling: bool): bool!(self: ptr gtk.Widget00; groupCycling: gboolean): gboolean",
    "motion_notify_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventMotion): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventMotion00): gboolean",
    "move_focus!gtk.Widget!1!(self: gtk.Widget; direction: gtk.DirectionType)!(self: ptr gtk.Widget00; direction: gtk.DirectionType)",
    "parent_set!gtk.Widget!1!(self: gtk.Widget; oldParent: gtk.Widget = nil)!(self: ptr gtk.Widget00; oldParent: ptr gtk.Widget00)",
    "popup_menu!gtk.Widget!0!(self: gtk.Widget): bool!(self: ptr gtk.Widget00): gboolean",
    "property_notify_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventProperty): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventProperty00): gboolean",
    "proximity_in_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventProximity): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventProximity00): gboolean",
    "proximity_out_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventProximity): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventProximity00): gboolean",
    "query_tooltip!gtk.Widget!4!(self: gtk.Widget; x: int; y: int; keyboardMode: bool; tooltip: gtk.Tooltip): bool!(self: ptr gtk.Widget00; x: int32; y: int32; keyboardMode: gboolean; tooltip: ptr gtk.Tooltip00): gboolean",
    "screen_changed!gtk.Widget!1!(self: gtk.Widget; previousScreen: gdk.Screen = nil)!(self: ptr gtk.Widget00; previousScreen: ptr gdk.Screen00)",
    "scroll_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventScroll): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventScroll00): gboolean",
    "selection_clear_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventSelection): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventSelection00): gboolean",
    "selection_get!gtk.Widget!3!(self: gtk.Widget; data: gtk.SelectionData; info: int; time: int)!(self: ptr gtk.Widget00; data: ptr gtk.SelectionData00; info: uint32; time: uint32)",
    "selection_notify_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventSelection): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventSelection00): gboolean",
    "selection_received!gtk.Widget!2!(self: gtk.Widget; data: gtk.SelectionData; time: int)!(self: ptr gtk.Widget00; data: ptr gtk.SelectionData00; time: uint32)",
    "selection_request_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventSelection): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventSelection00): gboolean",
    "show_help!gtk.Widget!1!(self: gtk.Widget; helpType: gtk.WidgetHelpType): bool!(self: ptr gtk.Widget00; helpType: gtk.WidgetHelpType): gboolean",
    "size_allocate!gtk.Widget!1!(self: gtk.Widget; allocation: gdk.Rectangle)!(self: ptr gtk.Widget00; allocation: gdk.Rectangle)",
    "state_changed!gtk.Widget!1!(self: gtk.Widget; state: gtk.StateType)!(self: ptr gtk.Widget00; state: gtk.StateType)",
    "state_flags_changed!gtk.Widget!1!(self: gtk.Widget; flags: gtk.StateFlags)!(self: ptr gtk.Widget00; flags: gtk.StateFlags)",
    "style_set!gtk.Widget!1!(self: gtk.Widget; previousStyle: gtk.Style = nil)!(self: ptr gtk.Widget00; previousStyle: ptr gtk.Style00)",
    "touch_event!gtk.Widget!1!(self: gtk.Widget; `object`: gdk.Event): bool!(self: ptr gtk.Widget00; `object`: ptr gdk.Event00): gboolean",
    "unmap_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventAny): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventAny00): gboolean",
    "visibility_notify_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventVisibility): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventVisibility00): gboolean",
    "window_state_event!gtk.Widget!1!(self: gtk.Widget; event: gdk.EventWindowState): bool!(self: ptr gtk.Widget00; event: ptr gdk.EventWindowState00): gboolean",
    "add!gtk.Container!1!(self: gtk.Container; `object`: gtk.Widget)!(self: ptr gtk.Container00; `object`: ptr gtk.Widget00)",
    "remove!gtk.Container!1!(self: gtk.Container; `object`: gtk.Widget)!(self: ptr gtk.Container00; `object`: ptr gtk.Widget00)",
    "set_focus_child!gtk.Container!1!(self: gtk.Container; `object`: gtk.Widget)!(self: ptr gtk.Container00; `object`: ptr gtk.Widget00)",
    "enable_debugging!gtk.Window!1!(self: gtk.Window; toggle: bool): bool!(self: ptr gtk.Window00; toggle: gboolean): gboolean",
    "set_focus!gtk.Window!1!(self: gtk.Window; widget: gtk.Widget = nil)!(self: ptr gtk.Window00; widget: ptr gtk.Widget00)",
    "response!gtk.Dialog!1!(self: gtk.Dialog; responseId: int)!(self: ptr gtk.Dialog00; responseId: int32)",
    "activate_link!gtk.AboutDialog!1!(self: gtk.AboutDialog; uri: cstring): bool!(self: ptr gtk.AboutDialog00; uri: cstring): gboolean",
    "window_added!gtk.Application!1!(self: gtk.Application; window: gtk.Window)!(self: ptr gtk.Application00; window: ptr gtk.Window00)",
    "window_removed!gtk.Application!1!(self: gtk.Application; window: gtk.Window)!(self: ptr gtk.Application00; window: ptr gtk.Window00)",
    "owner_change!gtk.Clipboard!1!(self: gtk.Clipboard; event: gdk.EventOwnerChange)!(self: ptr gtk.Clipboard00; event: ptr gdk.EventOwnerChange00)",
    "parsing_error!gtk.CssProvider!2!(self: gtk.CssProvider; section: gtk.CssSection; error: ptr glib.Error)!(self: ptr gtk.CssProvider00; section: ptr gtk.CssSection00; error: ptr glib.Error)",
    "accel_activate!gtk.AccelGroup!3!(self: gtk.AccelGroup; acceleratable: gobject.Object; keyval: int; modifier: gdk.ModifierType): bool!(self: ptr gtk.AccelGroup00; acceleratable: ptr gobject.Object00; keyval: uint32; modifier: gdk.ModifierType): gboolean",
    "accel_changed!gtk.AccelGroup!3!(self: gtk.AccelGroup; keyval: int; modifier: gdk.ModifierType; accelClosure: gobject.Closure)!(self: ptr gtk.AccelGroup00; keyval: uint32; modifier: gdk.ModifierType; accelClosure: ptr gobject.Closure00)",
    "event!gtk.TextTag!3!(self: gtk.TextTag; `object`: gobject.Object; event: gdk.Event; iter: gtk.TextIter): bool!(self: ptr gtk.TextTag00; `object`: ptr gobject.Object00; event: ptr gdk.Event00; iter: gtk.TextIter): gboolean",
    "apply_tag!gtk.TextBuffer!3!(self: gtk.TextBuffer; tag: gtk.TextTag; start: gtk.TextIter; `end`: gtk.TextIter)!(self: ptr gtk.TextBuffer00; tag: ptr gtk.TextTag00; start: gtk.TextIter; `end`: gtk.TextIter)",
    "delete_range!gtk.TextBuffer!2!(self: gtk.TextBuffer; start: gtk.TextIter; `end`: gtk.TextIter)!(self: ptr gtk.TextBuffer00; start: gtk.TextIter; `end`: gtk.TextIter)",
    "insert_child_anchor!gtk.TextBuffer!2!(self: gtk.TextBuffer; location: gtk.TextIter; anchor: gtk.TextChildAnchor)!(self: ptr gtk.TextBuffer00; location: gtk.TextIter; anchor: ptr gtk.TextChildAnchor00)",
    "insert_pixbuf!gtk.TextBuffer!2!(self: gtk.TextBuffer; location: gtk.TextIter; pixbuf: gdkpixbuf.Pixbuf)!(self: ptr gtk.TextBuffer00; location: gtk.TextIter; pixbuf: ptr gdkpixbuf.Pixbuf00)",
    "insert_text!gtk.TextBuffer!3!(self: gtk.TextBuffer; location: gtk.TextIter; text: cstring; len: int)!(self: ptr gtk.TextBuffer00; location: gtk.TextIter; text: cstring; len: int32)",
    "mark_deleted!gtk.TextBuffer!1!(self: gtk.TextBuffer; mark: gtk.TextMark)!(self: ptr gtk.TextBuffer00; mark: ptr gtk.TextMark00)",
    "mark_set!gtk.TextBuffer!2!(self: gtk.TextBuffer; location: gtk.TextIter; mark: gtk.TextMark)!(self: ptr gtk.TextBuffer00; location: gtk.TextIter; mark: ptr gtk.TextMark00)",
    "paste_done!gtk.TextBuffer!1!(self: gtk.TextBuffer; clipboard: gtk.Clipboard)!(self: ptr gtk.TextBuffer00; clipboard: ptr gtk.Clipboard00)",
    "remove_tag!gtk.TextBuffer!3!(self: gtk.TextBuffer; tag: gtk.TextTag; start: gtk.TextIter; `end`: gtk.TextIter)!(self: ptr gtk.TextBuffer00; tag: ptr gtk.TextTag00; start: gtk.TextIter; `end`: gtk.TextIter)",
    "tag_added!gtk.TextTagTable!1!(self: gtk.TextTagTable; tag: gtk.TextTag)!(self: ptr gtk.TextTagTable00; tag: ptr gtk.TextTag00)",
    "tag_changed!gtk.TextTagTable!2!(self: gtk.TextTagTable; tag: gtk.TextTag; sizeChanged: bool)!(self: ptr gtk.TextTagTable00; tag: ptr gtk.TextTag00; sizeChanged: gboolean)",
    "tag_removed!gtk.TextTagTable!1!(self: gtk.TextTagTable; tag: gtk.TextTag)!(self: ptr gtk.TextTagTable00; tag: ptr gtk.TextTag00)",
    "activate_current!gtk.MenuShell!1!(self: gtk.MenuShell; forceHide: bool)!(self: ptr gtk.MenuShell00; forceHide: gboolean)",
    "cycle_focus!gtk.MenuShell!1!(self: gtk.MenuShell; direction: gtk.DirectionType)!(self: ptr gtk.MenuShell00; direction: gtk.DirectionType)",
    "insert!gtk.MenuShell!2!(self: gtk.MenuShell; child: gtk.Widget; position: int)!(self: ptr gtk.MenuShell00; child: ptr gtk.Widget00; position: int32)",
    "move_current!gtk.MenuShell!1!(self: gtk.MenuShell; direction: gtk.MenuDirectionType)!(self: ptr gtk.MenuShell00; direction: gtk.MenuDirectionType)",
    "move_selected!gtk.MenuShell!1!(self: gtk.MenuShell; distance: int): bool!(self: ptr gtk.MenuShell00; distance: int32): gboolean",
    "move_scroll!gtk.Menu!1!(self: gtk.Menu; scrollType: gtk.ScrollType)!(self: ptr gtk.Menu00; scrollType: gtk.ScrollType)",
    "popped_up!gtk.Menu!4!(self: gtk.Menu; flippedRect: pointer; finalRect: pointer; flippedX: bool; flippedY: bool)!(self: ptr gtk.Menu00; flippedRect: pointer; finalRect: pointer; flippedX: gboolean; flippedY: gboolean)",
    "activate_link!gtk.Label!1!(self: gtk.Label; uri: cstring): bool!(self: ptr gtk.Label00; uri: cstring): gboolean",
    "move_cursor!gtk.Label!3!(self: gtk.Label; step: gtk.MovementStep; count: int; extendSelection: bool)!(self: ptr gtk.Label00; step: gtk.MovementStep; count: int32; extendSelection: gboolean)",
    "populate_popup!gtk.Label!1!(self: gtk.Label; menu: gtk.Menu)!(self: ptr gtk.Label00; menu: ptr gtk.Menu00)",
    "toggle_size_allocate!gtk.MenuItem!1!(self: gtk.MenuItem; `object`: int)!(self: ptr gtk.MenuItem00; `object`: int32)",
    "toggle_size_request!gtk.MenuItem!1!(self: gtk.MenuItem; `object`: pointer)!(self: ptr gtk.MenuItem00; `object`: pointer)",
    "changed!gtk.AccelMap!3!(self: gtk.AccelMap; accelPath: cstring; accelKey: int; accelMods: gdk.ModifierType)!(self: ptr gtk.AccelMap00; accelPath: cstring; accelKey: uint32; accelMods: gdk.ModifierType)",
    "format_entry_text!gtk.ComboBox!1!(self: gtk.ComboBox; path: cstring): string!(self: ptr gtk.ComboBox00; path: cstring): cstring",
    "move_active!gtk.ComboBox!1!(self: gtk.ComboBox; scrollType: gtk.ScrollType)!(self: ptr gtk.ComboBox00; scrollType: gtk.ScrollType)",
    "popdown!gtk.ComboBox!0!(self: gtk.ComboBox): bool!(self: ptr gtk.ComboBox00): gboolean",
    "delete_from_cursor!gtk.Entry!2!(self: gtk.Entry; `type`: gtk.DeleteType; count: int)!(self: ptr gtk.Entry00; `type`: gtk.DeleteType; count: int32)",
    "icon_press!gtk.Entry!2!(self: gtk.Entry; iconPos: gtk.EntryIconPosition; event: gdk.Event)!(self: ptr gtk.Entry00; iconPos: gtk.EntryIconPosition; event: ptr gdk.Event00)",
    "icon_release!gtk.Entry!2!(self: gtk.Entry; iconPos: gtk.EntryIconPosition; event: gdk.Event)!(self: ptr gtk.Entry00; iconPos: gtk.EntryIconPosition; event: ptr gdk.Event00)",
    "insert_at_cursor!gtk.Entry!1!(self: gtk.Entry; string: cstring)!(self: ptr gtk.Entry00; string: cstring)",
    "move_cursor!gtk.Entry!3!(self: gtk.Entry; step: gtk.MovementStep; count: int; extendSelection: bool)!(self: ptr gtk.Entry00; step: gtk.MovementStep; count: int32; extendSelection: gboolean)",
    "populate_popup!gtk.Entry!1!(self: gtk.Entry; widget: gtk.Widget)!(self: ptr gtk.Entry00; widget: ptr gtk.Widget00)",
    "preedit_changed!gtk.Entry!1!(self: gtk.Entry; preedit: cstring)!(self: ptr gtk.Entry00; preedit: cstring)",
    "change_value!gtk.SpinButton!1!(self: gtk.SpinButton; scroll: gtk.ScrollType)!(self: ptr gtk.SpinButton00; scroll: gtk.ScrollType)",
    "input!gtk.SpinButton!1!(self: gtk.SpinButton; newValue: var cdouble): int!(self: ptr gtk.SpinButton00; newValue: var cdouble): int32",
    "output!gtk.SpinButton!0!(self: gtk.SpinButton): bool!(self: ptr gtk.SpinButton00): gboolean",
    "custom_item_activated!gtk.AppChooserButton!1!(self: gtk.AppChooserButton; itemName: cstring)!(self: ptr gtk.AppChooserButton00; itemName: cstring)",
    "editing_started!gtk.CellRenderer!2!(self: gtk.CellRenderer; editable: gtk.CellEditable; path: cstring)!(self: ptr gtk.CellRenderer00; editable: ptr gtk.CellEditable00; path: cstring)",
    "deleted_text!gtk.EntryBuffer!2!(self: gtk.EntryBuffer; position: int; nChars: int)!(self: ptr gtk.EntryBuffer00; position: uint32; nChars: uint32)",
    "inserted_text!gtk.EntryBuffer!3!(self: gtk.EntryBuffer; position: int; chars: cstring; nChars: int)!(self: ptr gtk.EntryBuffer00; position: uint32; chars: cstring; nChars: uint32)",
    "row_changed!gtk.TreeModel!2!(self: gtk.TreeModel; path: gtk.TreePath; iter: gtk.TreeIter)!(self: ptr gtk.TreeModel00; path: ptr gtk.TreePath00; iter: gtk.TreeIter)",
    "row_deleted!gtk.TreeModel!1!(self: gtk.TreeModel; path: gtk.TreePath)!(self: ptr gtk.TreeModel00; path: ptr gtk.TreePath00)",
    "row_has_child_toggled!gtk.TreeModel!2!(self: gtk.TreeModel; path: gtk.TreePath; iter: gtk.TreeIter)!(self: ptr gtk.TreeModel00; path: ptr gtk.TreePath00; iter: gtk.TreeIter)",
    "row_inserted!gtk.TreeModel!2!(self: gtk.TreeModel; path: gtk.TreePath; iter: gtk.TreeIter)!(self: ptr gtk.TreeModel00; path: ptr gtk.TreePath00; iter: gtk.TreeIter)",
    "add_editable!gtk.CellArea!4!(self: gtk.CellArea; renderer: gtk.CellRenderer; editable: gtk.CellEditable; cellArea: gdk.Rectangle; path: cstring)!(self: ptr gtk.CellArea00; renderer: ptr gtk.CellRenderer00; editable: ptr gtk.CellEditable00; cellArea: gdk.Rectangle; path: cstring)",
    "apply_attributes!gtk.CellArea!4!(self: gtk.CellArea; model: gtk.TreeModel; iter: gtk.TreeIter; isExpander: bool; isExpanded: bool)!(self: ptr gtk.CellArea00; model: ptr gtk.TreeModel00; iter: gtk.TreeIter; isExpander: gboolean; isExpanded: gboolean)",
    "focus_changed!gtk.CellArea!2!(self: gtk.CellArea; renderer: gtk.CellRenderer; path: cstring)!(self: ptr gtk.CellArea00; renderer: ptr gtk.CellRenderer00; path: cstring)",
    "remove_editable!gtk.CellArea!2!(self: gtk.CellArea; renderer: gtk.CellRenderer; editable: gtk.CellEditable)!(self: ptr gtk.CellArea00; renderer: ptr gtk.CellRenderer00; editable: ptr gtk.CellEditable00)",
    "action_activated!gtk.EntryCompletion!1!(self: gtk.EntryCompletion; index: int)!(self: ptr gtk.EntryCompletion00; index: int32)",
    "cursor_on_match!gtk.EntryCompletion!2!(self: gtk.EntryCompletion; model: gtk.TreeModel; iter: gtk.TreeIter): bool!(self: ptr gtk.EntryCompletion00; model: ptr gtk.TreeModel00; iter: gtk.TreeIter): gboolean",
    "insert_prefix!gtk.EntryCompletion!1!(self: gtk.EntryCompletion; prefix: cstring): bool!(self: ptr gtk.EntryCompletion00; prefix: cstring): gboolean",
    "match_selected!gtk.EntryCompletion!2!(self: gtk.EntryCompletion; model: gtk.TreeModel; iter: gtk.TreeIter): bool!(self: ptr gtk.EntryCompletion00; model: ptr gtk.TreeModel00; iter: gtk.TreeIter): gboolean",
    "connect_proxy!gtk.ActionGroup!2!(self: gtk.ActionGroup; action: gtk.Action; proxy: gtk.Widget)!(self: ptr gtk.ActionGroup00; action: ptr gtk.Action00; proxy: ptr gtk.Widget00)",
    "disconnect_proxy!gtk.ActionGroup!2!(self: gtk.ActionGroup; action: gtk.Action; proxy: gtk.Widget)!(self: ptr gtk.ActionGroup00; action: ptr gtk.Action00; proxy: ptr gtk.Widget00)",
    "post_activate!gtk.ActionGroup!1!(self: gtk.ActionGroup; action: gtk.Action)!(self: ptr gtk.ActionGroup00; action: ptr gtk.Action00)",
    "pre_activate!gtk.ActionGroup!1!(self: gtk.ActionGroup; action: gtk.Action)!(self: ptr gtk.ActionGroup00; action: ptr gtk.Action00)",
    "create_menu_proxy!gtk.ToolItem!0!(self: gtk.ToolItem): bool!(self: ptr gtk.ToolItem00): gboolean",
    "value_changed!gtk.ScaleButton!1!(self: gtk.ScaleButton; value: cdouble)!(self: ptr gtk.ScaleButton00; value: cdouble)",
    "state_set!gtk.Switch!1!(self: gtk.Switch; state: bool): bool!(self: ptr gtk.Switch00; state: gboolean): gboolean",
    "activate_link!gtk.LinkButton!0!(self: gtk.LinkButton): bool!(self: ptr gtk.LinkButton00): gboolean",
    "application_activated!gtk.AppChooserWidget!1!(self: gtk.AppChooserWidget; application: gio.AppInfo)!(self: ptr gtk.AppChooserWidget00; application: ptr gio.AppInfo00)",
    "application_selected!gtk.AppChooserWidget!1!(self: gtk.AppChooserWidget; application: gio.AppInfo)!(self: ptr gtk.AppChooserWidget00; application: ptr gio.AppInfo00)",
    "populate_popup!gtk.AppChooserWidget!2!(self: gtk.AppChooserWidget; menu: gtk.Menu; application: gio.AppInfo)!(self: ptr gtk.AppChooserWidget00; menu: ptr gtk.Menu00; application: ptr gio.AppInfo00)",
    "prepare!gtk.Assistant!1!(self: gtk.Assistant; page: gtk.Widget)!(self: ptr gtk.Assistant00; page: ptr gtk.Widget00)",
    "activate_cursor_item!gtk.IconView!0!(self: gtk.IconView): bool!(self: ptr gtk.IconView00): gboolean",
    "item_activated!gtk.IconView!1!(self: gtk.IconView; path: gtk.TreePath)!(self: ptr gtk.IconView00; path: ptr gtk.TreePath00)",
    "move_cursor!gtk.IconView!2!(self: gtk.IconView; step: gtk.MovementStep; count: int): bool!(self: ptr gtk.IconView00; step: gtk.MovementStep; count: int32): gboolean",
    "child_activated!gtk.FlowBox!1!(self: gtk.FlowBox; child: gtk.FlowBoxChild)!(self: ptr gtk.FlowBox00; child: ptr gtk.FlowBoxChild00)",
    "move_cursor!gtk.FlowBox!2!(self: gtk.FlowBox; step: gtk.MovementStep; count: int): bool!(self: ptr gtk.FlowBox00; step: gtk.MovementStep; count: int32): gboolean",
    "accept_position!gtk.Paned!0!(self: gtk.Paned): bool!(self: ptr gtk.Paned00): gboolean",
    "cancel_position!gtk.Paned!0!(self: gtk.Paned): bool!(self: ptr gtk.Paned00): gboolean",
    "cycle_child_focus!gtk.Paned!1!(self: gtk.Paned; reversed: bool): bool!(self: ptr gtk.Paned00; reversed: gboolean): gboolean",
    "cycle_handle_focus!gtk.Paned!1!(self: gtk.Paned; reversed: bool): bool!(self: ptr gtk.Paned00; reversed: gboolean): gboolean",
    "move_handle!gtk.Paned!1!(self: gtk.Paned; scrollType: gtk.ScrollType): bool!(self: ptr gtk.Paned00; scrollType: gtk.ScrollType): gboolean",
    "toggle_handle_focus!gtk.Paned!0!(self: gtk.Paned): bool!(self: ptr gtk.Paned00): gboolean",
    "adjust_bounds!gtk.Range!1!(self: gtk.Range; value: cdouble)!(self: ptr gtk.Range00; value: cdouble)",
    "change_value!gtk.Range!2!(self: gtk.Range; scroll: gtk.ScrollType; value: cdouble): bool!(self: ptr gtk.Range00; scroll: gtk.ScrollType; value: cdouble): gboolean",
    "move_slider!gtk.Range!1!(self: gtk.Range; step: gtk.ScrollType)!(self: ptr gtk.Range00; step: gtk.ScrollType)",
    "format_value!gtk.Scale!1!(self: gtk.Scale; value: cdouble): string!(self: ptr gtk.Scale00; value: cdouble): cstring",
    "text_popped!gtk.Statusbar!2!(self: gtk.Statusbar; contextId: int; text: cstring)!(self: ptr gtk.Statusbar00; contextId: uint32; text: cstring)",
    "text_pushed!gtk.Statusbar!2!(self: gtk.Statusbar; contextId: int; text: cstring)!(self: ptr gtk.Statusbar00; contextId: uint32; text: cstring)",
    "focus_home_or_end!gtk.Toolbar!1!(self: gtk.Toolbar; focusHome: bool): bool!(self: ptr gtk.Toolbar00; focusHome: gboolean): gboolean",
    "orientation_changed!gtk.Toolbar!1!(self: gtk.Toolbar; orientation: gtk.Orientation)!(self: ptr gtk.Toolbar00; orientation: gtk.Orientation)",
    "popup_context_menu!gtk.Toolbar!3!(self: gtk.Toolbar; x: int; y: int; button: int): bool!(self: ptr gtk.Toolbar00; x: int32; y: int32; button: int32): gboolean",
    "style_changed!gtk.Toolbar!1!(self: gtk.Toolbar; style: gtk.ToolbarStyle)!(self: ptr gtk.Toolbar00; style: gtk.ToolbarStyle)",
    "changed!gtk.RadioAction!1!(self: gtk.RadioAction; current: gtk.RadioAction)!(self: ptr gtk.RadioAction00; current: ptr gtk.RadioAction00)",
    "add_widget!gtk.UIManager!1!(self: gtk.UIManager; widget: gtk.Widget)!(self: ptr gtk.UIManager00; widget: ptr gtk.Widget00)",
    "connect_proxy!gtk.UIManager!2!(self: gtk.UIManager; action: gtk.Action; proxy: gtk.Widget)!(self: ptr gtk.UIManager00; action: ptr gtk.Action00; proxy: ptr gtk.Widget00)",
    "disconnect_proxy!gtk.UIManager!2!(self: gtk.UIManager; action: gtk.Action; proxy: gtk.Widget)!(self: ptr gtk.UIManager00; action: ptr gtk.Action00; proxy: ptr gtk.Widget00)",
    "post_activate!gtk.UIManager!1!(self: gtk.UIManager; action: gtk.Action)!(self: ptr gtk.UIManager00; action: ptr gtk.Action00)",
    "pre_activate!gtk.UIManager!1!(self: gtk.UIManager; action: gtk.Action)!(self: ptr gtk.UIManager00; action: ptr gtk.Action00)",
    "change_current_page!gtk.ShortcutsSection!1!(self: gtk.ShortcutsSection; `object`: int): bool!(self: ptr gtk.ShortcutsSection00; `object`: int32): gboolean",
    "edge_overshot!gtk.ScrolledWindow!1!(self: gtk.ScrolledWindow; pos: gtk.PositionType)!(self: ptr gtk.ScrolledWindow00; pos: gtk.PositionType)",
    "edge_reached!gtk.ScrolledWindow!1!(self: gtk.ScrolledWindow; pos: gtk.PositionType)!(self: ptr gtk.ScrolledWindow00; pos: gtk.PositionType)",
    "move_focus_out!gtk.ScrolledWindow!1!(self: gtk.ScrolledWindow; directionType: gtk.DirectionType)!(self: ptr gtk.ScrolledWindow00; directionType: gtk.DirectionType)",
    "scroll_child!gtk.ScrolledWindow!2!(self: gtk.ScrolledWindow; scroll: gtk.ScrollType; horizontal: bool): bool!(self: ptr gtk.ScrolledWindow00; scroll: gtk.ScrollType; horizontal: gboolean): gboolean",
    "drag_action_ask!gtk.PlacesSidebar!1!(self: gtk.PlacesSidebar; actions: int): int!(self: ptr gtk.PlacesSidebar00; actions: int32): int32",
    "drag_action_requested!gtk.PlacesSidebar!3!(self: gtk.PlacesSidebar; context: gdk.DragContext; destFile: gio.GFile; sourceFileList: seq[gio.GFile]): int!(self: ptr gtk.PlacesSidebar00; context: ptr gdk.DragContext00; destFile: ptr gio.GFile00; sourceFileList: gio.GFile00): int32",
    "drag_perform_drop!gtk.PlacesSidebar!3!(self: gtk.PlacesSidebar; destFile: gio.GFile; sourceFileList: seq[gio.GFile]; action: int)!(self: ptr gtk.PlacesSidebar00; destFile: ptr gio.GFile00; sourceFileList: gio.GFile00; action: int32)",
    "mount!gtk.PlacesSidebar!1!(self: gtk.PlacesSidebar; mountOperation: gio.MountOperation)!(self: ptr gtk.PlacesSidebar00; mountOperation: ptr gio.MountOperation00)",
    "open_location!gtk.PlacesSidebar!2!(self: gtk.PlacesSidebar; location: gio.GFile; openFlags: gtk.PlacesOpenFlags)!(self: ptr gtk.PlacesSidebar00; location: ptr gio.GFile00; openFlags: gtk.PlacesOpenFlags)",
    "populate_popup!gtk.PlacesSidebar!3!(self: gtk.PlacesSidebar; container: gtk.Widget; selectedItem: gio.GFile = nil; selectedVolume: gio.Volume = nil)!(self: ptr gtk.PlacesSidebar00; container: ptr gtk.Widget00; selectedItem: ptr gio.GFile00; selectedVolume: ptr gio.Volume00)",
    "show_error_message!gtk.PlacesSidebar!2!(self: gtk.PlacesSidebar; primary: cstring; secondary: cstring)!(self: ptr gtk.PlacesSidebar00; primary: cstring; secondary: cstring)",
    "show_other_locations_with_flags!gtk.PlacesSidebar!1!(self: gtk.PlacesSidebar; openFlags: gtk.PlacesOpenFlags)!(self: ptr gtk.PlacesSidebar00; openFlags: gtk.PlacesOpenFlags)",
    "show_starred_location!gtk.PlacesSidebar!1!(self: gtk.PlacesSidebar; openFlags: gtk.PlacesOpenFlags)!(self: ptr gtk.PlacesSidebar00; openFlags: gtk.PlacesOpenFlags)",
    "unmount!gtk.PlacesSidebar!1!(self: gtk.PlacesSidebar; mountOperation: gio.MountOperation)!(self: ptr gtk.PlacesSidebar00; mountOperation: ptr gio.MountOperation00)",
    "delete_from_cursor!gtk.TextView!2!(self: gtk.TextView; `type`: gtk.DeleteType; count: int)!(self: ptr gtk.TextView00; `type`: gtk.DeleteType; count: int32)",
    "extend_selection!gtk.TextView!4!(self: gtk.TextView; granularity: gtk.TextExtendSelection; location: gtk.TextIter; start: gtk.TextIter; `end`: gtk.TextIter): bool!(self: ptr gtk.TextView00; granularity: gtk.TextExtendSelection; location: gtk.TextIter; start: gtk.TextIter; `end`: gtk.TextIter): gboolean",
    "insert_at_cursor!gtk.TextView!1!(self: gtk.TextView; string: cstring)!(self: ptr gtk.TextView00; string: cstring)",
    "move_cursor!gtk.TextView!3!(self: gtk.TextView; step: gtk.MovementStep; count: int; extendSelection: bool)!(self: ptr gtk.TextView00; step: gtk.MovementStep; count: int32; extendSelection: gboolean)",
    "move_viewport!gtk.TextView!2!(self: gtk.TextView; step: gtk.ScrollStep; count: int)!(self: ptr gtk.TextView00; step: gtk.ScrollStep; count: int32)",
    "populate_popup!gtk.TextView!1!(self: gtk.TextView; popup: gtk.Widget)!(self: ptr gtk.TextView00; popup: ptr gtk.Widget00)",
    "preedit_changed!gtk.TextView!1!(self: gtk.TextView; preedit: cstring)!(self: ptr gtk.TextView00; preedit: cstring)",
    "select_all!gtk.TextView!1!(self: gtk.TextView; select: bool)!(self: ptr gtk.TextView00; select: gboolean)",
    "change_current_page!gtk.Notebook!1!(self: gtk.Notebook; `object`: int): bool!(self: ptr gtk.Notebook00; `object`: int32): gboolean",
    "create_window!gtk.Notebook!3!(self: gtk.Notebook; page: gtk.Widget; x: int; y: int): Notebook!(self: ptr gtk.Notebook00; page: ptr gtk.Widget00; x: int32; y: int32): Notebook00",
    "focus_tab!gtk.Notebook!1!(self: gtk.Notebook; `object`: gtk.NotebookTab): bool!(self: ptr gtk.Notebook00; `object`: gtk.NotebookTab): gboolean",
    "move_focus_out!gtk.Notebook!1!(self: gtk.Notebook; `object`: gtk.DirectionType)!(self: ptr gtk.Notebook00; `object`: gtk.DirectionType)",
    "page_added!gtk.Notebook!2!(self: gtk.Notebook; child: gtk.Widget; pageNum: int)!(self: ptr gtk.Notebook00; child: ptr gtk.Widget00; pageNum: uint32)",
    "page_removed!gtk.Notebook!2!(self: gtk.Notebook; child: gtk.Widget; pageNum: int)!(self: ptr gtk.Notebook00; child: ptr gtk.Widget00; pageNum: uint32)",
    "page_reordered!gtk.Notebook!2!(self: gtk.Notebook; child: gtk.Widget; pageNum: int)!(self: ptr gtk.Notebook00; child: ptr gtk.Widget00; pageNum: uint32)",
    "reorder_tab!gtk.Notebook!2!(self: gtk.Notebook; `object`: gtk.DirectionType; p0: bool): bool!(self: ptr gtk.Notebook00; `object`: gtk.DirectionType; p0: gboolean): gboolean",
    "select_page!gtk.Notebook!1!(self: gtk.Notebook; `object`: bool): bool!(self: ptr gtk.Notebook00; `object`: gboolean): gboolean",
    "switch_page!gtk.Notebook!2!(self: gtk.Notebook; page: gtk.Widget; pageNum: int)!(self: ptr gtk.Notebook00; page: ptr gtk.Widget00; pageNum: uint32)",
    "get_child_position!gtk.Overlay!2!(self: gtk.Overlay; widget: gtk.Widget; allocation: var gdk.Rectangle): bool!(self: ptr gtk.Overlay00; widget: ptr gtk.Widget00; allocation: var gdk.Rectangle): gboolean",
    "child_attached!gtk.HandleBox!1!(self: gtk.HandleBox; widget: gtk.Widget)!(self: ptr gtk.HandleBox00; widget: ptr gtk.Widget00)",
    "child_detached!gtk.HandleBox!1!(self: gtk.HandleBox; widget: gtk.Widget)!(self: ptr gtk.HandleBox00; widget: ptr gtk.Widget00)",
    "plug_removed!gtk.Socket!0!(self: gtk.Socket): bool!(self: ptr gtk.Socket00): gboolean",
    "location_popup!gtk.FileChooserWidget!1!(self: gtk.FileChooserWidget; path: cstring)!(self: ptr gtk.FileChooserWidget00; path: cstring)",
    "quick_bookmark!gtk.FileChooserWidget!1!(self: gtk.FileChooserWidget; bookmarkIndex: int)!(self: ptr gtk.FileChooserWidget00; bookmarkIndex: int32)",
    "expand_collapse_cursor_row!gtk.TreeView!3!(self: gtk.TreeView; `object`: bool; p0: bool; p1: bool): bool!(self: ptr gtk.TreeView00; `object`: gboolean; p0: gboolean; p1: gboolean): gboolean",
    "move_cursor!gtk.TreeView!2!(self: gtk.TreeView; step: gtk.MovementStep; direction: int): bool!(self: ptr gtk.TreeView00; step: gtk.MovementStep; direction: int32): gboolean",
    "row_activated!gtk.TreeView!2!(self: gtk.TreeView; path: gtk.TreePath; column: gtk.TreeViewColumn)!(self: ptr gtk.TreeView00; path: ptr gtk.TreePath00; column: ptr gtk.TreeViewColumn00)",
    "row_collapsed!gtk.TreeView!2!(self: gtk.TreeView; iter: gtk.TreeIter; path: gtk.TreePath)!(self: ptr gtk.TreeView00; iter: gtk.TreeIter; path: ptr gtk.TreePath00)",
    "row_expanded!gtk.TreeView!2!(self: gtk.TreeView; iter: gtk.TreeIter; path: gtk.TreePath)!(self: ptr gtk.TreeView00; iter: gtk.TreeIter; path: ptr gtk.TreePath00)",
    "select_all!gtk.TreeView!0!(self: gtk.TreeView): bool!(self: ptr gtk.TreeView00): gboolean",
    "select_cursor_parent!gtk.TreeView!0!(self: gtk.TreeView): bool!(self: ptr gtk.TreeView00): gboolean",
    "select_cursor_row!gtk.TreeView!1!(self: gtk.TreeView; `object`: bool): bool!(self: ptr gtk.TreeView00; `object`: gboolean): gboolean",
    "start_interactive_search!gtk.TreeView!0!(self: gtk.TreeView): bool!(self: ptr gtk.TreeView00): gboolean",
    "test_collapse_row!gtk.TreeView!2!(self: gtk.TreeView; iter: gtk.TreeIter; path: gtk.TreePath): bool!(self: ptr gtk.TreeView00; iter: gtk.TreeIter; path: ptr gtk.TreePath00): gboolean",
    "test_expand_row!gtk.TreeView!2!(self: gtk.TreeView; iter: gtk.TreeIter; path: gtk.TreePath): bool!(self: ptr gtk.TreeView00; iter: gtk.TreeIter; path: ptr gtk.TreePath00): gboolean",
    "toggle_cursor_row!gtk.TreeView!0!(self: gtk.TreeView): bool!(self: ptr gtk.TreeView00): gboolean",
    "unselect_all!gtk.TreeView!0!(self: gtk.TreeView): bool!(self: ptr gtk.TreeView00): gboolean",
    "create_context!gtk.GLArea!0!(self: gtk.GLArea): gdk.GLContext!(self: ptr gtk.GLArea00): gdk.GLContext00",
    "render!gtk.GLArea!1!(self: gtk.GLArea; context: gdk.GLContext): bool!(self: ptr gtk.GLArea00; context: ptr gdk.GLContext00): gboolean",
    "resize!gtk.GLArea!2!(self: gtk.GLArea; width: int; height: int)!(self: ptr gtk.GLArea00; width: int32; height: int32)",
    "move_cursor!gtk.ListBox!2!(self: gtk.ListBox; `object`: gtk.MovementStep; p0: int)!(self: ptr gtk.ListBox00; `object`: gtk.MovementStep; p0: int32)",
    "row_activated!gtk.ListBox!1!(self: gtk.ListBox; row: gtk.ListBoxRow)!(self: ptr gtk.ListBox00; row: ptr gtk.ListBoxRow00)",
    "row_selected!gtk.ListBox!1!(self: gtk.ListBox; row: gtk.ListBoxRow = nil)!(self: ptr gtk.ListBox00; row: ptr gtk.ListBoxRow00)",
    "move!gtk.HSV!1!(self: gtk.HSV; `object`: gtk.DirectionType)!(self: ptr gtk.HSV00; `object`: gtk.DirectionType)",
    "offset_changed!gtk.LevelBar!1!(self: gtk.LevelBar; name: cstring)!(self: ptr gtk.LevelBar00; name: cstring)",
    "response!gtk.InfoBar!1!(self: gtk.InfoBar; responseId: int)!(self: ptr gtk.InfoBar00; responseId: int32)",
    "edited!gtk.CellRendererText!2!(self: gtk.CellRendererText; path: cstring; newText: cstring)!(self: ptr gtk.CellRendererText00; path: cstring; newText: cstring)",
    "accel_cleared!gtk.CellRendererAccel!1!(self: gtk.CellRendererAccel; pathString: cstring)!(self: ptr gtk.CellRendererAccel00; pathString: cstring)",
    "accel_edited!gtk.CellRendererAccel!4!(self: gtk.CellRendererAccel; pathString: cstring; accelKey: int; accelMods: gdk.ModifierType; hardwareKeycode: int)!(self: ptr gtk.CellRendererAccel00; pathString: cstring; accelKey: uint32; accelMods: gdk.ModifierType; hardwareKeycode: uint32)",
    "changed!gtk.CellRendererCombo!2!(self: gtk.CellRendererCombo; pathString: cstring; newIter: gtk.TreeIter)!(self: ptr gtk.CellRendererCombo00; pathString: cstring; newIter: gtk.TreeIter)",
    "toggled!gtk.CellRendererToggle!1!(self: gtk.CellRendererToggle; path: cstring)!(self: ptr gtk.CellRendererToggle00; path: cstring)",
    "color_activated!gtk.ColorChooser!1!(self: gtk.ColorChooser; color: gdk.RGBA)!(self: ptr gtk.ColorChooser00; color: gdk.RGBA)",
    "delete_text!gtk.Editable!2!(self: gtk.Editable; startPos: int; endPos: int)!(self: ptr gtk.Editable00; startPos: int32; endPos: int32)",
    "insert_text!gtk.Editable!3!(self: gtk.Editable; newText: cstring; newTextLength: int; position: var int)!(self: ptr gtk.Editable00; newText: cstring; newTextLength: int32; position: var int32)",
    "key_pressed!gtk.EventControllerKey!3!(self: gtk.EventControllerKey; keyval: int; keycode: int; state: gdk.ModifierType): bool!(self: ptr gtk.EventControllerKey00; keyval: uint32; keycode: uint32; state: gdk.ModifierType): gboolean",
    "key_released!gtk.EventControllerKey!3!(self: gtk.EventControllerKey; keyval: int; keycode: int; state: gdk.ModifierType)!(self: ptr gtk.EventControllerKey00; keyval: uint32; keycode: uint32; state: gdk.ModifierType)",
    "modifiers!gtk.EventControllerKey!1!(self: gtk.EventControllerKey; `object`: gdk.ModifierType): bool!(self: ptr gtk.EventControllerKey00; `object`: gdk.ModifierType): gboolean",
    "commit!gtk.IMContext!1!(self: gtk.IMContext; str: cstring)!(self: ptr gtk.IMContext00; str: cstring)",
    "delete_surrounding!gtk.IMContext!2!(self: gtk.IMContext; offset: int; nChars: int): bool!(self: ptr gtk.IMContext00; offset: int32; nChars: int32): gboolean",
    "retrieve_surrounding!gtk.IMContext!0!(self: gtk.IMContext): bool!(self: ptr gtk.IMContext00): gboolean",
    "enter!gtk.EventControllerMotion!2!(self: gtk.EventControllerMotion; x: cdouble; y: cdouble)!(self: ptr gtk.EventControllerMotion00; x: cdouble; y: cdouble)",
    "motion!gtk.EventControllerMotion!2!(self: gtk.EventControllerMotion; x: cdouble; y: cdouble)!(self: ptr gtk.EventControllerMotion00; x: cdouble; y: cdouble)",
    "decelerate!gtk.EventControllerScroll!2!(self: gtk.EventControllerScroll; velX: cdouble; velY: cdouble)!(self: ptr gtk.EventControllerScroll00; velX: cdouble; velY: cdouble)",
    "scroll!gtk.EventControllerScroll!2!(self: gtk.EventControllerScroll; dx: cdouble; dy: cdouble)!(self: ptr gtk.EventControllerScroll00; dx: cdouble; dy: cdouble)",
    "response!gtk.NativeDialog!1!(self: gtk.NativeDialog; responseId: int)!(self: ptr gtk.NativeDialog00; responseId: int32)",
    "confirm_overwrite!gtk.FileChooser!0!(self: gtk.FileChooser): FileChooserConfirmation!(self: ptr gtk.FileChooser00): FileChooserConfirmation",
    "font_activated!gtk.FontChooser!1!(self: gtk.FontChooser; fontname: cstring)!(self: ptr gtk.FontChooser00; fontname: cstring)",
    "begin!gtk.Gesture!1!(self: gtk.Gesture; sequence: gdk.EventSequence = nil)!(self: ptr gtk.Gesture00; sequence: ptr gdk.EventSequence00)",
    "cancel!gtk.Gesture!1!(self: gtk.Gesture; sequence: gdk.EventSequence = nil)!(self: ptr gtk.Gesture00; sequence: ptr gdk.EventSequence00)",
    "end!gtk.Gesture!1!(self: gtk.Gesture; sequence: gdk.EventSequence = nil)!(self: ptr gtk.Gesture00; sequence: ptr gdk.EventSequence00)",
    "sequence_state_changed!gtk.Gesture!2!(self: gtk.Gesture; sequence: gdk.EventSequence = nil; state: gtk.EventSequenceState)!(self: ptr gtk.Gesture00; sequence: ptr gdk.EventSequence00; state: gtk.EventSequenceState)",
    "update!gtk.Gesture!1!(self: gtk.Gesture; sequence: gdk.EventSequence = nil)!(self: ptr gtk.Gesture00; sequence: ptr gdk.EventSequence00)",
    "drag_begin!gtk.GestureDrag!2!(self: gtk.GestureDrag; startX: cdouble; startY: cdouble)!(self: ptr gtk.GestureDrag00; startX: cdouble; startY: cdouble)",
    "drag_end!gtk.GestureDrag!2!(self: gtk.GestureDrag; offsetX: cdouble; offsetY: cdouble)!(self: ptr gtk.GestureDrag00; offsetX: cdouble; offsetY: cdouble)",
    "drag_update!gtk.GestureDrag!2!(self: gtk.GestureDrag; offsetX: cdouble; offsetY: cdouble)!(self: ptr gtk.GestureDrag00; offsetX: cdouble; offsetY: cdouble)",
    "pressed!gtk.GestureLongPress!2!(self: gtk.GestureLongPress; x: cdouble; y: cdouble)!(self: ptr gtk.GestureLongPress00; x: cdouble; y: cdouble)",
    "pressed!gtk.GestureMultiPress!3!(self: gtk.GestureMultiPress; nPress: int; x: cdouble; y: cdouble)!(self: ptr gtk.GestureMultiPress00; nPress: int32; x: cdouble; y: cdouble)",
    "released!gtk.GestureMultiPress!3!(self: gtk.GestureMultiPress; nPress: int; x: cdouble; y: cdouble)!(self: ptr gtk.GestureMultiPress00; nPress: int32; x: cdouble; y: cdouble)",
    "pan!gtk.GesturePan!2!(self: gtk.GesturePan; direction: gtk.PanDirection; offset: cdouble)!(self: ptr gtk.GesturePan00; direction: gtk.PanDirection; offset: cdouble)",
    "angle_changed!gtk.GestureRotate!2!(self: gtk.GestureRotate; angle: cdouble; angleDelta: cdouble)!(self: ptr gtk.GestureRotate00; angle: cdouble; angleDelta: cdouble)",
    "down!gtk.GestureStylus!2!(self: gtk.GestureStylus; `object`: cdouble; p0: cdouble)!(self: ptr gtk.GestureStylus00; `object`: cdouble; p0: cdouble)",
    "motion!gtk.GestureStylus!2!(self: gtk.GestureStylus; `object`: cdouble; p0: cdouble)!(self: ptr gtk.GestureStylus00; `object`: cdouble; p0: cdouble)",
    "proximity!gtk.GestureStylus!2!(self: gtk.GestureStylus; `object`: cdouble; p0: cdouble)!(self: ptr gtk.GestureStylus00; `object`: cdouble; p0: cdouble)",
    "up!gtk.GestureStylus!2!(self: gtk.GestureStylus; `object`: cdouble; p0: cdouble)!(self: ptr gtk.GestureStylus00; `object`: cdouble; p0: cdouble)",
    "swipe!gtk.GestureSwipe!2!(self: gtk.GestureSwipe; velocityX: cdouble; velocityY: cdouble)!(self: ptr gtk.GestureSwipe00; velocityX: cdouble; velocityY: cdouble)",
    "scale_changed!gtk.GestureZoom!1!(self: gtk.GestureZoom; scale: cdouble)!(self: ptr gtk.GestureZoom00; scale: cdouble)",
    "got_page_size!gtk.PrintOperationPreview!2!(self: gtk.PrintOperationPreview; context: gtk.PrintContext; pageSetup: gtk.PageSetup)!(self: ptr gtk.PrintOperationPreview00; context: ptr gtk.PrintContext00; pageSetup: ptr gtk.PageSetup00)",
    "ready!gtk.PrintOperationPreview!1!(self: gtk.PrintOperationPreview; context: gtk.PrintContext)!(self: ptr gtk.PrintOperationPreview00; context: ptr gtk.PrintContext00)",
    "begin_print!gtk.PrintOperation!1!(self: gtk.PrintOperation; context: gtk.PrintContext)!(self: ptr gtk.PrintOperation00; context: ptr gtk.PrintContext00)",
    "create_custom_widget!gtk.PrintOperation!0!(self: gtk.PrintOperation): gobject.Object!(self: ptr gtk.PrintOperation00): gobject.Object00",
    "custom_widget_apply!gtk.PrintOperation!1!(self: gtk.PrintOperation; widget: gtk.Widget)!(self: ptr gtk.PrintOperation00; widget: ptr gtk.Widget00)",
    "done!gtk.PrintOperation!1!(self: gtk.PrintOperation; resu: gtk.PrintOperationResult)!(self: ptr gtk.PrintOperation00; resu: gtk.PrintOperationResult)",
    "draw_page!gtk.PrintOperation!2!(self: gtk.PrintOperation; context: gtk.PrintContext; pageNr: int)!(self: ptr gtk.PrintOperation00; context: ptr gtk.PrintContext00; pageNr: int32)",
    "end_print!gtk.PrintOperation!1!(self: gtk.PrintOperation; context: gtk.PrintContext)!(self: ptr gtk.PrintOperation00; context: ptr gtk.PrintContext00)",
    "paginate!gtk.PrintOperation!1!(self: gtk.PrintOperation; context: gtk.PrintContext): bool!(self: ptr gtk.PrintOperation00; context: ptr gtk.PrintContext00): gboolean",
    "preview!gtk.PrintOperation!3!(self: gtk.PrintOperation; preview: gtk.PrintOperationPreview; context: gtk.PrintContext; parent: gtk.Window = nil): bool!(self: ptr gtk.PrintOperation00; preview: ptr gtk.PrintOperationPreview00; context: ptr gtk.PrintContext00; parent: ptr gtk.Window00): gboolean",
    "request_page_setup!gtk.PrintOperation!3!(self: gtk.PrintOperation; context: gtk.PrintContext; pageNr: int; setup: gtk.PageSetup)!(self: ptr gtk.PrintOperation00; context: ptr gtk.PrintContext00; pageNr: int32; setup: ptr gtk.PageSetup00)",
    "update_custom_widget!gtk.PrintOperation!3!(self: gtk.PrintOperation; widget: gtk.Widget; setup: gtk.PageSetup; settings: gtk.PrintSettings)!(self: ptr gtk.PrintOperation00; widget: ptr gtk.Widget00; setup: ptr gtk.PageSetup00; settings: ptr gtk.PrintSettings00)",
    "button_press_event!gtk.StatusIcon!1!(self: gtk.StatusIcon; event: gdk.EventButton): bool!(self: ptr gtk.StatusIcon00; event: ptr gdk.EventButton00): gboolean",
    "button_release_event!gtk.StatusIcon!1!(self: gtk.StatusIcon; event: gdk.EventButton): bool!(self: ptr gtk.StatusIcon00; event: ptr gdk.EventButton00): gboolean",
    "popup_menu!gtk.StatusIcon!2!(self: gtk.StatusIcon; button: int; activateTime: int)!(self: ptr gtk.StatusIcon00; button: uint32; activateTime: uint32)",
    "query_tooltip!gtk.StatusIcon!4!(self: gtk.StatusIcon; x: int; y: int; keyboardMode: bool; tooltip: gtk.Tooltip): bool!(self: ptr gtk.StatusIcon00; x: int32; y: int32; keyboardMode: gboolean; tooltip: ptr gtk.Tooltip00): gboolean",
    "scroll_event!gtk.StatusIcon!1!(self: gtk.StatusIcon; event: gdk.EventScroll): bool!(self: ptr gtk.StatusIcon00; event: ptr gdk.EventScroll00): gboolean",
    "size_changed!gtk.StatusIcon!1!(self: gtk.StatusIcon; size: int): bool!(self: ptr gtk.StatusIcon00; size: int32): gboolean",
    "tool_changed!gdk.Device!1!(self: gdk.Device; tool: gdk.DeviceTool)!(self: ptr gdk.Device00; tool: ptr gdk.DeviceTool00)",
    "device_added!gdk.Seat!1!(self: gdk.Seat; device: gdk.Device)!(self: ptr gdk.Seat00; device: ptr gdk.Device00)",
    "device_removed!gdk.Seat!1!(self: gdk.Seat; device: gdk.Device)!(self: ptr gdk.Seat00; device: ptr gdk.Device00)",
    "tool_added!gdk.Seat!1!(self: gdk.Seat; tool: gdk.DeviceTool)!(self: ptr gdk.Seat00; tool: ptr gdk.DeviceTool00)",
    "tool_removed!gdk.Seat!1!(self: gdk.Seat; tool: gdk.DeviceTool)!(self: ptr gdk.Seat00; tool: ptr gdk.DeviceTool00)",
    "closed!gdk.Display!1!(self: gdk.Display; isError: bool)!(self: ptr gdk.Display00; isError: gboolean)",
    "monitor_added!gdk.Display!1!(self: gdk.Display; monitor: gdk.Monitor)!(self: ptr gdk.Display00; monitor: ptr gdk.Monitor00)",
    "monitor_removed!gdk.Display!1!(self: gdk.Display; monitor: gdk.Monitor)!(self: ptr gdk.Display00; monitor: ptr gdk.Monitor00)",
    "seat_added!gdk.Display!1!(self: gdk.Display; seat: gdk.Seat)!(self: ptr gdk.Display00; seat: ptr gdk.Seat00)",
    "seat_removed!gdk.Display!1!(self: gdk.Display; seat: gdk.Seat)!(self: ptr gdk.Display00; seat: ptr gdk.Seat00)",
    "device_added!gdk.DeviceManager!1!(self: gdk.DeviceManager; device: gdk.Device)!(self: ptr gdk.DeviceManager00; device: ptr gdk.Device00)",
    "device_changed!gdk.DeviceManager!1!(self: gdk.DeviceManager; device: gdk.Device)!(self: ptr gdk.DeviceManager00; device: ptr gdk.Device00)",
    "device_removed!gdk.DeviceManager!1!(self: gdk.DeviceManager; device: gdk.Device)!(self: ptr gdk.DeviceManager00; device: ptr gdk.Device00)",
    "create_surface!gdk.Window!2!(self: gdk.Window; width: int; height: int): cairo.Surface!(self: ptr gdk.Window00; width: int32; height: int32): cairo.Surface00",
    "from_embedder!gdk.Window!4!(self: gdk.Window; embedderX: cdouble; embedderY: cdouble; offscreenX: var cdouble; offscreenY: var cdouble)!(self: ptr gdk.Window00; embedderX: cdouble; embedderY: cdouble; offscreenX: var cdouble; offscreenY: var cdouble)",
    "moved_to_rect!gdk.Window!4!(self: gdk.Window; flippedRect: pointer; finalRect: pointer; flippedX: bool; flippedY: bool)!(self: ptr gdk.Window00; flippedRect: pointer; finalRect: pointer; flippedX: gboolean; flippedY: gboolean)",
    "pick_embedded_child!gdk.Window!2!(self: gdk.Window; x: cdouble; y: cdouble): Window!(self: ptr gdk.Window00; x: cdouble; y: cdouble): Window00",
    "to_embedder!gdk.Window!4!(self: gdk.Window; offscreenX: cdouble; offscreenY: cdouble; embedderX: var cdouble; embedderY: var cdouble)!(self: ptr gdk.Window00; offscreenX: cdouble; offscreenY: cdouble; embedderX: var cdouble; embedderY: var cdouble)",
    "display_opened!gdk.DisplayManager!1!(self: gdk.DisplayManager; display: gdk.Display)!(self: ptr gdk.DisplayManager00; display: ptr gdk.Display00)",
    "action_changed!gdk.DragContext!1!(self: gdk.DragContext; action: gdk.DragAction)!(self: ptr gdk.DragContext00; action: gdk.DragAction)",
    "cancel!gdk.DragContext!1!(self: gdk.DragContext; reason: gdk.DragCancelReason)!(self: ptr gdk.DragContext00; reason: gdk.DragCancelReason)",
    "drop_performed!gdk.DragContext!1!(self: gdk.DragContext; time: int)!(self: ptr gdk.DragContext00; time: int32)",
    "activate!gio.SimpleAction!1!(self: gio.SimpleAction; parameter: glib.Variant = nil)!(self: ptr gio.SimpleAction00; parameter: ptr glib.Variant00)",
    "change_state!gio.SimpleAction!1!(self: gio.SimpleAction; value: glib.Variant = nil)!(self: ptr gio.SimpleAction00; value: ptr glib.Variant00)",
    "command_line!gio.GApplication!1!(self: gio.GApplication; commandLine: gio.ApplicationCommandLine): int!(self: ptr gio.GApplication00; commandLine: ptr gio.ApplicationCommandLine00): int32",
    "handle_local_options!gio.GApplication!1!(self: gio.GApplication; options: glib.VariantDict): int!(self: ptr gio.GApplication00; options: ptr glib.VariantDict00): int32",
    "name_lost!gio.GApplication!0!(self: gio.GApplication): bool!(self: ptr gio.GApplication00): gboolean",
    "open!gio.GApplication!3!(self: gio.GApplication; files: GFile00Array; nFiles: int; hint: cstring)!(self: ptr gio.GApplication00; files: gio.GFile00Array; nFiles: int32; hint: cstring)",
    "action_added!gio.ActionGroup!1!(self: gio.ActionGroup; actionName: cstring)!(self: ptr gio.ActionGroup00; actionName: cstring)",
    "action_enabled_changed!gio.ActionGroup!2!(self: gio.ActionGroup; actionName: cstring; enabled: bool)!(self: ptr gio.ActionGroup00; actionName: cstring; enabled: gboolean)",
    "action_removed!gio.ActionGroup!1!(self: gio.ActionGroup; actionName: cstring)!(self: ptr gio.ActionGroup00; actionName: cstring)",
    "action_state_changed!gio.ActionGroup!2!(self: gio.ActionGroup; actionName: cstring; value: glib.Variant)!(self: ptr gio.ActionGroup00; actionName: cstring; value: ptr glib.Variant00)",
    "ask_password!gio.MountOperation!4!(self: gio.MountOperation; message: cstring; defaultUser: cstring; defaultDomain: cstring; flags: gio.AskPasswordFlags)!(self: ptr gio.MountOperation00; message: cstring; defaultUser: cstring; defaultDomain: cstring; flags: gio.AskPasswordFlags)",
    "ask_question!gio.MountOperation!2!(self: gio.MountOperation; message: cstring; choices: varargs[string, `$`])!(self: ptr gio.MountOperation00; message: cstring; choices: cstringArray)",
    "reply!gio.MountOperation!1!(self: gio.MountOperation; resu: gio.MountOperationResult)!(self: ptr gio.MountOperation00; resu: gio.MountOperationResult)",
    "show_processes!gio.MountOperation!3!(self: gio.MountOperation; message: cstring; processes: GArray00Array; choices: varargs[string, `$`])!(self: ptr gio.MountOperation00; message: cstring; processes: GArray00Array; choices: cstringArray)",
    "show_unmount_progress!gio.MountOperation!3!(self: gio.MountOperation; message: cstring; timeLeft: int64; bytesLeft: int64)!(self: ptr gio.MountOperation00; message: cstring; timeLeft: int64; bytesLeft: int64)",
    "launch_failed!gio.AppLaunchContext!1!(self: gio.AppLaunchContext; startupNotifyId: cstring)!(self: ptr gio.AppLaunchContext00; startupNotifyId: cstring)",
    "launched!gio.AppLaunchContext!2!(self: gio.AppLaunchContext; info: gio.AppInfo; platformData: glib.Variant)!(self: ptr gio.AppLaunchContext00; info: ptr gio.AppInfo00; platformData: ptr glib.Variant00)",
    "closed!gio.DBusConnection!2!(self: gio.DBusConnection; remotePeerVanished: bool; error: ptr glib.Error)!(self: ptr gio.DBusConnection00; remotePeerVanished: gboolean; error: ptr glib.Error)",
    "items_changed!gio.MenuModel!3!(self: gio.MenuModel; position: int; removed: int; added: int)!(self: ptr gio.MenuModel00; position: int32; removed: int32; added: int32)",
    "allow_mechanism!gio.DBusAuthObserver!1!(self: gio.DBusAuthObserver; mechanism: cstring): bool!(self: ptr gio.DBusAuthObserver00; mechanism: cstring): gboolean",
    "authorize_authenticated_peer!gio.DBusAuthObserver!2!(self: gio.DBusAuthObserver; stream: gio.IOStream; credentials: gio.Credentials = nil): bool!(self: ptr gio.DBusAuthObserver00; stream: ptr gio.IOStream00; credentials: ptr gio.Credentials00): gboolean",
    "changed!gio.FileMonitor!3!(self: gio.FileMonitor; file: gio.GFile; otherFile: gio.GFile = nil; eventType: gio.FileMonitorEvent)!(self: ptr gio.FileMonitor00; file: ptr gio.GFile00; otherFile: ptr gio.GFile00; eventType: gio.FileMonitorEvent)",
    "g_properties_changed!gio.DBusProxy!2!(self: gio.DBusProxy; changedProperties: glib.Variant; invalidatedProperties: varargs[string, `$`])!(self: ptr gio.DBusProxy00; changedProperties: ptr glib.Variant00; invalidatedProperties: cstringArray)",
    "g_signal!gio.DBusProxy!3!(self: gio.DBusProxy; senderName: cstring = nil; signalName: cstring; parameters: glib.Variant)!(self: ptr gio.DBusProxy00; senderName: cstring; signalName: cstring; parameters: ptr glib.Variant00)",
    "interface_proxy_properties_changed!gio.DBusObjectManagerClient!4!(self: gio.DBusObjectManagerClient; objectProxy: gio.DBusObjectProxy; interfaceProxy: gio.DBusProxy; changedProperties: glib.Variant; invalidatedProperties: varargs[string, `$`])!(self: ptr gio.DBusObjectManagerClient00; objectProxy: ptr gio.DBusObjectProxy00; interfaceProxy: ptr gio.DBusProxy00; changedProperties: ptr glib.Variant00; invalidatedProperties: cstringArray)",
    "interface_proxy_signal!gio.DBusObjectManagerClient!5!(self: gio.DBusObjectManagerClient; objectProxy: gio.DBusObjectProxy; interfaceProxy: gio.DBusProxy; senderName: cstring; signalName: cstring; parameters: glib.Variant)!(self: ptr gio.DBusObjectManagerClient00; objectProxy: ptr gio.DBusObjectProxy00; interfaceProxy: ptr gio.DBusProxy00; senderName: cstring; signalName: cstring; parameters: ptr glib.Variant00)",
    "g_authorize_method!gio.DBusInterfaceSkeleton!1!(self: gio.DBusInterfaceSkeleton; invocation: gio.DBusMethodInvocation): bool!(self: ptr gio.DBusInterfaceSkeleton00; invocation: ptr gio.DBusMethodInvocation00): gboolean",
    "authorize_method!gio.DBusObjectSkeleton!2!(self: gio.DBusObjectSkeleton; `interface`: gio.DBusInterfaceSkeleton; invocation: gio.DBusMethodInvocation): bool!(self: ptr gio.DBusObjectSkeleton00; `interface`: ptr gio.DBusInterfaceSkeleton00; invocation: ptr gio.DBusMethodInvocation00): gboolean",
    "interface_added!gio.DBusObject!1!(self: gio.DBusObject; `interface`: gio.DBusInterface)!(self: ptr gio.DBusObject00; `interface`: ptr gio.DBusInterface00)",
    "interface_removed!gio.DBusObject!1!(self: gio.DBusObject; `interface`: gio.DBusInterface)!(self: ptr gio.DBusObject00; `interface`: ptr gio.DBusInterface00)",
    "interface_added!gio.DBusObjectManager!2!(self: gio.DBusObjectManager; `object`: gio.DBusObject; `interface`: gio.DBusInterface)!(self: ptr gio.DBusObjectManager00; `object`: ptr gio.DBusObject00; `interface`: ptr gio.DBusInterface00)",
    "interface_removed!gio.DBusObjectManager!2!(self: gio.DBusObjectManager; `object`: gio.DBusObject; `interface`: gio.DBusInterface)!(self: ptr gio.DBusObjectManager00; `object`: ptr gio.DBusObject00; `interface`: ptr gio.DBusInterface00)",
    "object_added!gio.DBusObjectManager!1!(self: gio.DBusObjectManager; `object`: gio.DBusObject)!(self: ptr gio.DBusObjectManager00; `object`: ptr gio.DBusObject00)",
    "object_removed!gio.DBusObjectManager!1!(self: gio.DBusObjectManager; `object`: gio.DBusObject)!(self: ptr gio.DBusObjectManager00; `object`: ptr gio.DBusObject00)",
    "new_connection!gio.DBusServer!1!(self: gio.DBusServer; connection: gio.DBusConnection): bool!(self: ptr gio.DBusServer00; connection: ptr gio.DBusConnection00): gboolean",
    "accept_certificate!gio.DtlsConnection!2!(self: gio.DtlsConnection; peerCert: gio.TlsCertificate; errors: gio.TlsCertificateFlags): bool!(self: ptr gio.DtlsConnection00; peerCert: ptr gio.TlsCertificate00; errors: gio.TlsCertificateFlags): gboolean",
    "accept_certificate!gio.TlsConnection!2!(self: gio.TlsConnection; peerCert: gio.TlsCertificate; errors: gio.TlsCertificateFlags): bool!(self: ptr gio.TlsConnection00; peerCert: ptr gio.TlsCertificate00; errors: gio.TlsCertificateFlags): gboolean",
    "items_changed!gio.ListModel!3!(self: gio.ListModel; position: int; removed: int; added: int)!(self: ptr gio.ListModel00; position: uint32; removed: uint32; added: uint32)",
    "low_memory_warning!gio.MemoryMonitor!1!(self: gio.MemoryMonitor; level: gio.MemoryMonitorWarningLevel)!(self: ptr gio.MemoryMonitor00; level: gio.MemoryMonitorWarningLevel)",
    "drive_changed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "drive_connected!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "drive_disconnected!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "drive_eject_button!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "drive_stop_button!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; drive: gio.Drive)!(self: ptr gio.VolumeMonitor00; drive: ptr gio.Drive00)",
    "mount_added!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; mount: gio.Mount)!(self: ptr gio.VolumeMonitor00; mount: ptr gio.Mount00)",
    "mount_changed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; mount: gio.Mount)!(self: ptr gio.VolumeMonitor00; mount: ptr gio.Mount00)",
    "mount_pre_unmount!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; mount: gio.Mount)!(self: ptr gio.VolumeMonitor00; mount: ptr gio.Mount00)",
    "mount_removed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; mount: gio.Mount)!(self: ptr gio.VolumeMonitor00; mount: ptr gio.Mount00)",
    "volume_added!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; volume: gio.Volume)!(self: ptr gio.VolumeMonitor00; volume: ptr gio.Volume00)",
    "volume_changed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; volume: gio.Volume)!(self: ptr gio.VolumeMonitor00; volume: ptr gio.Volume00)",
    "volume_removed!gio.VolumeMonitor!1!(self: gio.VolumeMonitor; volume: gio.Volume)!(self: ptr gio.VolumeMonitor00; volume: ptr gio.Volume00)",
    "network_changed!gio.NetworkMonitor!1!(self: gio.NetworkMonitor; networkAvailable: bool)!(self: ptr gio.NetworkMonitor00; networkAvailable: gboolean)",
    "change_event!gio.Settings!2!(self: gio.Settings; keys: seq[uint32]): bool!(self: ptr gio.Settings00; keys: uint32Array; nKeys: int32): gboolean",
    "changed!gio.Settings!1!(self: gio.Settings; key: cstring)!(self: ptr gio.Settings00; key: cstring)",
    "writable_change_event!gio.Settings!1!(self: gio.Settings; key: int): bool!(self: ptr gio.Settings00; key: uint32): gboolean",
    "writable_changed!gio.Settings!1!(self: gio.Settings; key: cstring)!(self: ptr gio.Settings00; key: cstring)",
    "event!gio.SocketClient!3!(self: gio.SocketClient; event: gio.SocketClientEvent; connectable: gio.SocketConnectable; connection: gio.IOStream = nil)!(self: ptr gio.SocketClient00; event: gio.SocketClientEvent; connectable: ptr gio.SocketConnectable00; connection: ptr gio.IOStream00)",
    "event!gio.SocketListener!2!(self: gio.SocketListener; event: gio.SocketListenerEvent; socket: gio.Socket)!(self: ptr gio.SocketListener00; event: gio.SocketListenerEvent; socket: ptr gio.Socket00)",
    "incoming!gio.SocketService!2!(self: gio.SocketService; connection: gio.SocketConnection; sourceObject: gobject.Object = nil): bool!(self: ptr gio.SocketService00; connection: ptr gio.SocketConnection00; sourceObject: ptr gobject.Object00): gboolean",
    "run!gio.ThreadedSocketService!2!(self: gio.ThreadedSocketService; connection: gio.SocketConnection; sourceObject: gobject.Object = nil): bool!(self: ptr gio.ThreadedSocketService00; connection: ptr gio.SocketConnection00; sourceObject: ptr gobject.Object00): gboolean",
    "area_updated!gdkpixbuf.PixbufLoader!4!(self: gdkpixbuf.PixbufLoader; x: int; y: int; width: int; height: int)!(self: ptr gdkpixbuf.PixbufLoader00; x: int32; y: int32; width: int32; height: int32)",
    "size_prepared!gdkpixbuf.PixbufLoader!2!(self: gdkpixbuf.PixbufLoader; width: int; height: int)!(self: ptr gdkpixbuf.PixbufLoader00; width: int32; height: int32)",
    "bracket_matched!gtksource.Buffer!2!(self: gtksource.Buffer; iter: gtk.TextIter; state: gtksource.BracketMatchType)!(self: ptr gtksource.Buffer00; iter: gtk.TextIter; state: gtksource.BracketMatchType)",
    "highlight_updated!gtksource.Buffer!2!(self: gtksource.Buffer; start: gtk.TextIter; `end`: gtk.TextIter)!(self: ptr gtksource.Buffer00; start: gtk.TextIter; `end`: gtk.TextIter)",
    "source_mark_updated!gtksource.Buffer!1!(self: gtksource.Buffer; mark: gtk.TextMark)!(self: ptr gtksource.Buffer00; mark: ptr gtk.TextMark00)",
    "move_cursor!gtksource.Completion!2!(self: gtksource.Completion; step: gtk.ScrollStep; num: int)!(self: ptr gtksource.Completion00; step: gtk.ScrollStep; num: int32)",
    "move_page!gtksource.Completion!2!(self: gtksource.Completion; step: gtk.ScrollStep; num: int)!(self: ptr gtksource.Completion00; step: gtk.ScrollStep; num: int32)",
    "populate_context!gtksource.Completion!1!(self: gtksource.Completion; context: gtksource.CompletionContext)!(self: ptr gtksource.Completion00; context: ptr gtksource.CompletionContext00)",
    "change_case!gtksource.View!1!(self: gtksource.View; caseType: gtksource.ChangeCaseType)!(self: ptr gtksource.View00; caseType: gtksource.ChangeCaseType)",
    "change_number!gtksource.View!1!(self: gtksource.View; count: int)!(self: ptr gtksource.View00; count: int32)",
    "line_mark_activated!gtksource.View!2!(self: gtksource.View; iter: gtk.TextIter; event: gdk.Event)!(self: ptr gtksource.View00; iter: gtk.TextIter; event: ptr gdk.Event00)",
    "move_lines!gtksource.View!1!(self: gtksource.View; down: bool)!(self: ptr gtksource.View00; down: gboolean)",
    "move_to_matching_bracket!gtksource.View!1!(self: gtksource.View; extendSelection: bool)!(self: ptr gtksource.View00; extendSelection: gboolean)",
    "move_words!gtksource.View!1!(self: gtksource.View; count: int)!(self: ptr gtksource.View00; count: int32)",
    "smart_home_end!gtksource.View!2!(self: gtksource.View; iter: gtk.TextIter; count: int)!(self: ptr gtksource.View00; iter: gtk.TextIter; count: int32)",
    "activate!gtksource.GutterRenderer!3!(self: gtksource.GutterRenderer; iter: gtk.TextIter; area: gdk.Rectangle; event: gdk.Event)!(self: ptr gtksource.GutterRenderer00; iter: gtk.TextIter; area: gdk.Rectangle; event: ptr gdk.Event00)",
    "query_activatable!gtksource.GutterRenderer!3!(self: gtksource.GutterRenderer; iter: gtk.TextIter; area: gdk.Rectangle; event: gdk.Event): bool!(self: ptr gtksource.GutterRenderer00; iter: gtk.TextIter; area: gdk.Rectangle; event: ptr gdk.Event00): gboolean",
    "query_data!gtksource.GutterRenderer!3!(self: gtksource.GutterRenderer; start: gtk.TextIter; `end`: gtk.TextIter; state: gtksource.GutterRendererState)!(self: ptr gtksource.GutterRenderer00; start: gtk.TextIter; `end`: gtk.TextIter; state: gtksource.GutterRendererState)",
    "query_tooltip!gtksource.GutterRenderer!5!(self: gtksource.GutterRenderer; iter: gtk.TextIter; area: gdk.Rectangle; x: int; y: int; tooltip: gtk.Tooltip): bool!(self: ptr gtksource.GutterRenderer00; iter: gtk.TextIter; area: gdk.Rectangle; x: int32; y: int32; tooltip: ptr gtk.Tooltip00): gboolean",
    "query_tooltip_markup!gtksource.MarkAttributes!1!(self: gtksource.MarkAttributes; mark: gtksource.Mark): string!(self: ptr gtksource.MarkAttributes00; mark: ptr gtksource.Mark00): cstring",
    "query_tooltip_text!gtksource.MarkAttributes!1!(self: gtksource.MarkAttributes; mark: gtksource.Mark): string!(self: ptr gtksource.MarkAttributes00; mark: ptr gtksource.Mark00): cstring",
    "active_descendant_changed!atk.Object!1!(self: atk.Object; arg1: atk.Object)!(self: ptr atk.Object00; arg1: ptr ptr atk.Object00)",
    "children_changed!atk.Object!2!(self: atk.Object; arg1: int; arg2: atk.Object)!(self: ptr atk.Object00; arg1: uint32; arg2: ptr ptr atk.Object00)",
    "focus_event!atk.Object!1!(self: atk.Object; arg1: bool)!(self: ptr atk.Object00; arg1: gboolean)",
    "property_change!atk.Object!1!(self: atk.Object; arg1: atk.PropertyValues)!(self: ptr atk.Object00; arg1: ptr ptr atk.PropertyValues00)",
    "state_change!atk.Object!2!(self: atk.Object; arg1: cstring; arg2: bool)!(self: ptr atk.Object00; arg1: cstring; arg2: gboolean)",
    "bounds_changed!atk.Component!1!(self: atk.Component; arg1: atk.Rectangle)!(self: ptr atk.Component00; arg1: atk.Rectangle)",
    "page_changed!atk.Document!1!(self: atk.Document; pageNumber: int)!(self: ptr atk.Document00; pageNumber: int32)",
    "link_selected!atk.Hypertext!1!(self: atk.Hypertext; arg1: int)!(self: ptr atk.Hypertext00; arg1: int32)",
    "column_deleted!atk.Table!2!(self: atk.Table; arg1: int; arg2: int)!(self: ptr atk.Table00; arg1: int32; arg2: int32)",
    "column_inserted!atk.Table!2!(self: atk.Table; arg1: int; arg2: int)!(self: ptr atk.Table00; arg1: int32; arg2: int32)",
    "row_deleted!atk.Table!2!(self: atk.Table; arg1: int; arg2: int)!(self: ptr atk.Table00; arg1: int32; arg2: int32)",
    "row_inserted!atk.Table!2!(self: atk.Table; arg1: int; arg2: int)!(self: ptr atk.Table00; arg1: int32; arg2: int32)",
    "text_caret_moved!atk.Text!1!(self: atk.Text; arg1: int)!(self: ptr atk.Text00; arg1: int32)",
    "text_changed!atk.Text!2!(self: atk.Text; arg1: int; arg2: int)!(self: ptr atk.Text00; arg1: int32; arg2: int32)",
    "text_insert!atk.Text!3!(self: atk.Text; arg1: int; arg2: int; arg3: cstring)!(self: ptr atk.Text00; arg1: int32; arg2: int32; arg3: cstring)",
    "text_remove!atk.Text!3!(self: atk.Text; arg1: int; arg2: int; arg3: cstring)!(self: ptr atk.Text00; arg1: int32; arg2: int32; arg3: cstring)",
    "value_changed!atk.Value!2!(self: atk.Value; value: cdouble; text: cstring)!(self: ptr atk.Value00; value: cdouble; text: cstring)",
    "char_size_changed!vte.Terminal!2!(self: vte.Terminal; width: int; height: int)!(self: ptr vte.Terminal00; width: uint32; height: uint32)",
    "child_exited!vte.Terminal!1!(self: vte.Terminal; status: int)!(self: ptr vte.Terminal00; status: int32)",
    "commit!vte.Terminal!2!(self: vte.Terminal; text: cstring; size: int)!(self: ptr vte.Terminal00; text: cstring; size: uint32)",
    "hyperlink_hover_uri_changed!vte.Terminal!2!(self: vte.Terminal; uri: cstring; bbox: gdk.Rectangle)!(self: ptr vte.Terminal00; uri: cstring; bbox: gdk.Rectangle)",
    "move_window!vte.Terminal!2!(self: vte.Terminal; x: int; y: int)!(self: ptr vte.Terminal00; x: uint32; y: uint32)",
    "resize_window!vte.Terminal!2!(self: vte.Terminal; width: int; height: int)!(self: ptr vte.Terminal00; width: uint32; height: uint32)",
    "text_scrolled!vte.Terminal!1!(self: vte.Terminal; delta: int)!(self: ptr vte.Terminal00; delta: int32)",
    "content_sniffed!soup.Message!2!(self: soup.Message; `type`: cstring; params: ptr HashTable00)!(self: ptr soup.Message00; `type`: cstring; params: ptr HashTable00)",
    "got_chunk!soup.Message!1!(self: soup.Message; chunk: soup.Buffer)!(self: ptr soup.Message00; chunk: ptr soup.Buffer00)",
    "network_event!soup.Message!2!(self: soup.Message; event: gio.SocketClientEvent; connection: gio.IOStream)!(self: ptr soup.Message00; event: gio.SocketClientEvent; connection: ptr gio.IOStream00)",
    "wrote_body_data!soup.Message!1!(self: soup.Message; chunk: soup.Buffer)!(self: ptr soup.Message00; chunk: ptr soup.Buffer00)",
    "event!soup.Socket!2!(self: soup.Socket; event: gio.SocketClientEvent; connection: gio.IOStream)!(self: ptr soup.Socket00; event: gio.SocketClientEvent; connection: ptr gio.IOStream00)",
    "new_connection!soup.Socket!1!(self: soup.Socket; new: soup.Socket)!(self: ptr soup.Socket00; new: ptr soup.Socket00)",
    "authenticate!soup.Session!3!(self: soup.Session; msg: soup.Message; auth: soup.Auth; retrying: bool)!(self: ptr soup.Session00; msg: ptr soup.Message00; auth: ptr soup.Auth00; retrying: gboolean)",
    "connection_created!soup.Session!1!(self: soup.Session; connection: gobject.Object)!(self: ptr soup.Session00; connection: ptr gobject.Object00)",
    "request_queued!soup.Session!1!(self: soup.Session; msg: soup.Message)!(self: ptr soup.Session00; msg: ptr soup.Message00)",
    "request_started!soup.Session!2!(self: soup.Session; msg: soup.Message; socket: soup.Socket)!(self: ptr soup.Session00; msg: ptr soup.Message00; socket: ptr soup.Socket00)",
    "request_unqueued!soup.Session!1!(self: soup.Session; msg: soup.Message)!(self: ptr soup.Session00; msg: ptr soup.Message00)",
    "tunneling!soup.Session!1!(self: soup.Session; connection: gobject.Object)!(self: ptr soup.Session00; connection: ptr gobject.Object00)",
    "authenticate!soup.AuthManager!3!(self: soup.AuthManager; msg: soup.Message; auth: soup.Auth; retrying: bool)!(self: ptr soup.AuthManager00; msg: ptr soup.Message00; auth: ptr soup.Auth00; retrying: gboolean)",
    "changed!soup.CookieJar!2!(self: soup.CookieJar; oldCookie: soup.Cookie; newCookie: soup.Cookie)!(self: ptr soup.CookieJar00; oldCookie: ptr soup.Cookie00; newCookie: ptr soup.Cookie00)",
    "changed!soup.HSTSEnforcer!2!(self: soup.HSTSEnforcer; oldPolicy: soup.HSTSPolicy; newPolicy: soup.HSTSPolicy)!(self: ptr soup.HSTSEnforcer00; oldPolicy: ptr soup.HSTSPolicy00; newPolicy: ptr soup.HSTSPolicy00)",
    "hsts_enforced!soup.HSTSEnforcer!1!(self: soup.HSTSEnforcer; message: soup.Message)!(self: ptr soup.HSTSEnforcer00; message: ptr soup.Message00)",
    "error!soup.WebsocketConnection!1!(self: soup.WebsocketConnection; error: ptr glib.Error)!(self: ptr soup.WebsocketConnection00; error: ptr glib.Error)",
    "message!soup.WebsocketConnection!2!(self: soup.WebsocketConnection; `type`: int; message: glib.Bytes)!(self: ptr soup.WebsocketConnection00; `type`: int32; message: ptr glib.Bytes00)",
    "pong!soup.WebsocketConnection!1!(self: soup.WebsocketConnection; message: glib.Bytes)!(self: ptr soup.WebsocketConnection00; message: ptr glib.Bytes00)",
    "request_aborted!soup.Server!2!(self: soup.Server; message: soup.Message; client: soup.ClientContext)!(self: ptr soup.Server00; message: ptr soup.Message00; client: ptr soup.ClientContext00)",
    "request_finished!soup.Server!2!(self: soup.Server; message: soup.Message; client: soup.ClientContext)!(self: ptr soup.Server00; message: ptr soup.Message00; client: ptr soup.ClientContext00)",
    "request_read!soup.Server!2!(self: soup.Server; message: soup.Message; client: soup.ClientContext)!(self: ptr soup.Server00; message: ptr soup.Message00; client: ptr soup.ClientContext00)",
    "request_started!soup.Server!2!(self: soup.Server; message: soup.Message; client: soup.ClientContext)!(self: ptr soup.Server00; message: ptr soup.Message00; client: ptr soup.ClientContext00)",
    "authenticated!webkit2.AuthenticationRequest!1!(self: webkit2.AuthenticationRequest; credential: webkit2.Credential)!(self: ptr webkit2.AuthenticationRequest00; credential: ptr webkit2.Credential00)",
    "update!webkit2.PrintCustomWidget!2!(self: webkit2.PrintCustomWidget; pageSetup: gtk.PageSetup; printSettings: gtk.PrintSettings)!(self: ptr webkit2.PrintCustomWidget00; pageSetup: ptr gtk.PageSetup00; printSettings: ptr gtk.PrintSettings00)",
    "create_custom_widget!webkit2.PrintOperation!0!(self: webkit2.PrintOperation): PrintCustomWidget!(self: ptr webkit2.PrintOperation00): PrintCustomWidget00",
    "failed!webkit2.PrintOperation!1!(self: webkit2.PrintOperation; error: ptr glib.Error)!(self: ptr webkit2.PrintOperation00; error: ptr glib.Error)",
    "failed!webkit2.WebResource!1!(self: webkit2.WebResource; error: ptr glib.Error)!(self: ptr webkit2.WebResource00; error: ptr glib.Error)",
    "failed_with_tls_errors!webkit2.WebResource!2!(self: webkit2.WebResource; certificate: gio.TlsCertificate; errors: gio.TlsCertificateFlags)!(self: ptr webkit2.WebResource00; certificate: ptr gio.TlsCertificate00; errors: gio.TlsCertificateFlags)",
    "received_data!webkit2.WebResource!1!(self: webkit2.WebResource; dataLength: uint64)!(self: ptr webkit2.WebResource00; dataLength: uint64)",
    "sent_request!webkit2.WebResource!2!(self: webkit2.WebResource; request: webkit2.URIRequest; redirectedResponse: webkit2.URIResponse)!(self: ptr webkit2.WebResource00; request: ptr webkit2.URIRequest00; redirectedResponse: ptr webkit2.URIResponse00)",
    "authenticate!webkit2.WebView!1!(self: webkit2.WebView; request: webkit2.AuthenticationRequest): bool!(self: ptr webkit2.WebView00; request: ptr webkit2.AuthenticationRequest00): gboolean",
    "context_menu!webkit2.WebView!3!(self: webkit2.WebView; contextMenu: webkit2.ContextMenu; event: gdk.Event; hitTestResult: webkit2.HitTestResult): bool!(self: ptr webkit2.WebView00; contextMenu: ptr webkit2.ContextMenu00; event: ptr gdk.Event00; hitTestResult: ptr webkit2.HitTestResult00): gboolean",
    "create!webkit2.WebView!1!(self: webkit2.WebView; navigationAction: webkit2.NavigationAction): gtk.Widget!(self: ptr webkit2.WebView00; navigationAction: ptr webkit2.NavigationAction00): gtk.Widget00",
    "decide_policy!webkit2.WebView!2!(self: webkit2.WebView; decision: webkit2.PolicyDecision; decisionType: webkit2.PolicyDecisionType): bool!(self: ptr webkit2.WebView00; decision: ptr webkit2.PolicyDecision00; decisionType: webkit2.PolicyDecisionType): gboolean",
    "enter_fullscreen!webkit2.WebView!0!(self: webkit2.WebView): bool!(self: ptr webkit2.WebView00): gboolean",
    "insecure_content_detected!webkit2.WebView!1!(self: webkit2.WebView; event: webkit2.InsecureContentEvent)!(self: ptr webkit2.WebView00; event: webkit2.InsecureContentEvent)",
    "leave_fullscreen!webkit2.WebView!0!(self: webkit2.WebView): bool!(self: ptr webkit2.WebView00): gboolean",
    "load_changed!webkit2.WebView!1!(self: webkit2.WebView; loadEvent: webkit2.LoadEvent)!(self: ptr webkit2.WebView00; loadEvent: webkit2.LoadEvent)",
    "load_failed!webkit2.WebView!3!(self: webkit2.WebView; loadEvent: webkit2.LoadEvent; failingUri: cstring; error: ptr glib.Error): bool!(self: ptr webkit2.WebView00; loadEvent: webkit2.LoadEvent; failingUri: cstring; error: ptr glib.Error): gboolean",
    "load_failed_with_tls_errors!webkit2.WebView!3!(self: webkit2.WebView; failingUri: cstring; certificate: gio.TlsCertificate; errors: gio.TlsCertificateFlags): bool!(self: ptr webkit2.WebView00; failingUri: cstring; certificate: ptr gio.TlsCertificate00; errors: gio.TlsCertificateFlags): gboolean",
    "mouse_target_changed!webkit2.WebView!2!(self: webkit2.WebView; hitTestResult: webkit2.HitTestResult; modifiers: int)!(self: ptr webkit2.WebView00; hitTestResult: ptr webkit2.HitTestResult00; modifiers: uint32)",
    "permission_request!webkit2.WebView!1!(self: webkit2.WebView; request: webkit2.PermissionRequest): bool!(self: ptr webkit2.WebView00; request: ptr webkit2.PermissionRequest00): gboolean",
    "print!webkit2.WebView!1!(self: webkit2.WebView; printOperation: webkit2.PrintOperation): bool!(self: ptr webkit2.WebView00; printOperation: ptr webkit2.PrintOperation00): gboolean",
    "resource_load_started!webkit2.WebView!2!(self: webkit2.WebView; resource: webkit2.WebResource; request: webkit2.URIRequest)!(self: ptr webkit2.WebView00; resource: ptr webkit2.WebResource00; request: ptr webkit2.URIRequest00)",
    "run_color_chooser!webkit2.WebView!1!(self: webkit2.WebView; request: webkit2.ColorChooserRequest): bool!(self: ptr webkit2.WebView00; request: ptr webkit2.ColorChooserRequest00): gboolean",
    "run_file_chooser!webkit2.WebView!1!(self: webkit2.WebView; request: webkit2.FileChooserRequest): bool!(self: ptr webkit2.WebView00; request: ptr webkit2.FileChooserRequest00): gboolean",
    "script_dialog!webkit2.WebView!1!(self: webkit2.WebView; dialog: webkit2.ScriptDialog): bool!(self: ptr webkit2.WebView00; dialog: ptr webkit2.ScriptDialog00): gboolean",
    "show_notification!webkit2.WebView!1!(self: webkit2.WebView; notification: webkit2.Notification): bool!(self: ptr webkit2.WebView00; notification: ptr webkit2.Notification00): gboolean",
    "show_option_menu!webkit2.WebView!3!(self: webkit2.WebView; menu: webkit2.OptionMenu; event: gdk.Event; rectangle: gdk.Rectangle): bool!(self: ptr webkit2.WebView00; menu: ptr webkit2.OptionMenu00; event: ptr gdk.Event00; rectangle: gdk.Rectangle): gboolean",
    "submit_form!webkit2.WebView!1!(self: webkit2.WebView; request: webkit2.FormSubmissionRequest)!(self: ptr webkit2.WebView00; request: ptr webkit2.FormSubmissionRequest00)",
    "user_message_received!webkit2.WebView!1!(self: webkit2.WebView; message: webkit2.UserMessage): bool!(self: ptr webkit2.WebView00; message: ptr webkit2.UserMessage00): gboolean",
    "web_process_crashed!webkit2.WebView!0!(self: webkit2.WebView): bool!(self: ptr webkit2.WebView00): gboolean",
    "web_process_terminated!webkit2.WebView!1!(self: webkit2.WebView; reason: webkit2.WebProcessTerminationReason)!(self: ptr webkit2.WebView00; reason: webkit2.WebProcessTerminationReason)",
    "create_web_view!webkit2.AutomationSession!0!(self: webkit2.AutomationSession): WebView!(self: ptr webkit2.AutomationSession00): WebView00",
    "created_destination!webkit2.Download!1!(self: webkit2.Download; destination: cstring)!(self: ptr webkit2.Download00; destination: cstring)",
    "decide_destination!webkit2.Download!1!(self: webkit2.Download; suggestedFilename: cstring): bool!(self: ptr webkit2.Download00; suggestedFilename: cstring): gboolean",
    "failed!webkit2.Download!1!(self: webkit2.Download; error: ptr glib.Error)!(self: ptr webkit2.Download00; error: ptr glib.Error)",
    "received_data!webkit2.Download!1!(self: webkit2.Download; dataLength: uint64)!(self: ptr webkit2.Download00; dataLength: uint64)",
    "automation_started!webkit2.WebContext!1!(self: webkit2.WebContext; session: webkit2.AutomationSession)!(self: ptr webkit2.WebContext00; session: ptr webkit2.AutomationSession00)",
    "download_started!webkit2.WebContext!1!(self: webkit2.WebContext; download: webkit2.Download)!(self: ptr webkit2.WebContext00; download: ptr webkit2.Download00)",
    "user_message_received!webkit2.WebContext!1!(self: webkit2.WebContext; message: webkit2.UserMessage): bool!(self: ptr webkit2.WebContext00; message: ptr webkit2.UserMessage00): gboolean",
    "favicon_changed!webkit2.FaviconDatabase!2!(self: webkit2.FaviconDatabase; pageUri: cstring; faviconUri: cstring)!(self: ptr webkit2.FaviconDatabase00; pageUri: cstring; faviconUri: cstring)",
    "start!webkit2.GeolocationManager!0!(self: webkit2.GeolocationManager): bool!(self: ptr webkit2.GeolocationManager00): gboolean",
    "counted_matches!webkit2.FindController!1!(self: webkit2.FindController; matchCount: int)!(self: ptr webkit2.FindController00; matchCount: uint32)",
    "found_text!webkit2.FindController!1!(self: webkit2.FindController; matchCount: int)!(self: ptr webkit2.FindController00; matchCount: uint32)",
    "attach!webkit2.WebInspector!0!(self: webkit2.WebInspector): bool!(self: ptr webkit2.WebInspector00): gboolean",
    "bring_to_front!webkit2.WebInspector!0!(self: webkit2.WebInspector): bool!(self: ptr webkit2.WebInspector00): gboolean",
    "detach!webkit2.WebInspector!0!(self: webkit2.WebInspector): bool!(self: ptr webkit2.WebInspector00): gboolean",
    "open_window!webkit2.WebInspector!0!(self: webkit2.WebInspector): bool!(self: ptr webkit2.WebInspector00): gboolean",
    "changed!webkit2.BackForwardList!2!(self: webkit2.BackForwardList; itemAdded: webkit2.BackForwardListItem = nil; itemsRemoved: pointer)!(self: ptr webkit2.BackForwardList00; itemAdded: ptr webkit2.BackForwardListItem00; itemsRemoved: pointer)",
    "script_message_received!webkit2.UserContentManager!1!(self: webkit2.UserContentManager; jsResult: webkit2.JavascriptResult)!(self: ptr webkit2.UserContentManager00; jsResult: ptr webkit2.JavascriptResult00)",
    "committed!webkit2.InputMethodContext!1!(self: webkit2.InputMethodContext; text: cstring)!(self: ptr webkit2.InputMethodContext00; text: cstring)",
    "delete_surrounding!webkit2.InputMethodContext!2!(self: webkit2.InputMethodContext; offset: int; nChars: int)!(self: ptr webkit2.InputMethodContext00; offset: int32; nChars: uint32)",
    "console_message_sent!webkit2webextension.WebPage!1!(self: webkit2webextension.WebPage; consoleMessage: webkit2webextension.ConsoleMessage)!(self: ptr webkit2webextension.WebPage00; consoleMessage: ptr webkit2webextension.ConsoleMessage00)",
    "context_menu!webkit2webextension.WebPage!2!(self: webkit2webextension.WebPage; contextMenu: webkit2webextension.ContextMenu; hitTestResult: webkit2webextension.WebHitTestResult): bool!(self: ptr webkit2webextension.WebPage00; contextMenu: ptr webkit2webextension.ContextMenu00; hitTestResult: ptr webkit2webextension.WebHitTestResult00): gboolean",
    "form_controls_associated!webkit2webextension.WebPage!1!(self: webkit2webextension.WebPage; elements: PtrArray00Array)!(self: ptr webkit2webextension.WebPage00; elements: PtrArray00Array)",
    "form_controls_associated_for_frame!webkit2webextension.WebPage!2!(self: webkit2webextension.WebPage; elements: PtrArray00Array; frame: webkit2webextension.Frame)!(self: ptr webkit2webextension.WebPage00; elements: PtrArray00Array; frame: ptr webkit2webextension.Frame00)",
    "send_request!webkit2webextension.WebPage!2!(self: webkit2webextension.WebPage; request: webkit2webextension.URIRequest; redirectedResponse: webkit2webextension.URIResponse): bool!(self: ptr webkit2webextension.WebPage00; request: ptr webkit2webextension.URIRequest00; redirectedResponse: ptr webkit2webextension.URIResponse00): gboolean",
    "user_message_received!webkit2webextension.WebPage!1!(self: webkit2webextension.WebPage; message: webkit2webextension.UserMessage): bool!(self: ptr webkit2webextension.WebPage00; message: ptr webkit2webextension.UserMessage00): gboolean",
    "will_submit_form!webkit2webextension.WebPage!6!(self: webkit2webextension.WebPage; form: webkit2webextension.DOMElement; step: webkit2webextension.FormSubmissionStep; sourceFrame: webkit2webextension.Frame; targetFrame: webkit2webextension.Frame; textFieldNames: PtrArray00Array; textFieldValues: PtrArray00Array)!(self: ptr webkit2webextension.WebPage00; form: ptr webkit2webextension.DOMElement00; step: webkit2webextension.FormSubmissionStep; sourceFrame: ptr webkit2webextension.Frame00; targetFrame: ptr webkit2webextension.Frame00; textFieldNames: PtrArray00Array; textFieldValues: PtrArray00Array)",
    "window_object_cleared!webkit2webextension.ScriptWorld!2!(self: webkit2webextension.ScriptWorld; page: webkit2webextension.WebPage; frame: webkit2webextension.Frame)!(self: ptr webkit2webextension.ScriptWorld00; page: ptr webkit2webextension.WebPage00; frame: ptr webkit2webextension.Frame00)",
    "page_created!webkit2webextension.WebExtension!1!(self: webkit2webextension.WebExtension; webPage: webkit2webextension.WebPage)!(self: ptr webkit2webextension.WebExtension00; webPage: ptr webkit2webextension.WebPage00)",
    "user_message_received!webkit2webextension.WebExtension!1!(self: webkit2webextension.WebExtension; message: webkit2webextension.UserMessage)!(self: ptr webkit2webextension.WebExtension00; message: ptr webkit2webextension.UserMessage00)",
    "deep_notify!gst.Object!2!(self: gst.Object; propObject: gst.Object; prop: gobject.ParamSpec)!(self: ptr gst.Object00; propObject: ptr gst.Object00; prop: ptr gobject.ParamSpec00)",
    "linked!gst.Pad!1!(self: gst.Pad; peer: gst.Pad)!(self: ptr gst.Pad00; peer: ptr gst.Pad00)",
    "unlinked!gst.Pad!1!(self: gst.Pad; peer: gst.Pad)!(self: ptr gst.Pad00; peer: ptr gst.Pad00)",
    "pad_added!gst.Element!1!(self: gst.Element; newPad: gst.Pad)!(self: ptr gst.Element00; newPad: ptr gst.Pad00)",
    "pad_removed!gst.Element!1!(self: gst.Element; oldPad: gst.Pad)!(self: ptr gst.Element00; oldPad: ptr gst.Pad00)",
    "deep_element_added!gst.Bin!2!(self: gst.Bin; subBin: gst.Bin; element: gst.Element)!(self: ptr gst.Bin00; subBin: ptr gst.Bin00; element: ptr gst.Element00)",
    "deep_element_removed!gst.Bin!2!(self: gst.Bin; subBin: gst.Bin; element: gst.Element)!(self: ptr gst.Bin00; subBin: ptr gst.Bin00; element: ptr gst.Element00)",
    "do_latency!gst.Bin!0!(self: gst.Bin): bool!(self: ptr gst.Bin00): gboolean",
    "element_added!gst.Bin!1!(self: gst.Bin; element: gst.Element)!(self: ptr gst.Bin00; element: ptr gst.Element00)",
    "element_removed!gst.Bin!1!(self: gst.Bin; element: gst.Element)!(self: ptr gst.Bin00; element: ptr gst.Element00)",
    "pad_created!gst.PadTemplate!1!(self: gst.PadTemplate; pad: gst.Pad)!(self: ptr gst.PadTemplate00; pad: ptr gst.Pad00)",
    "stream_notify!gst.StreamCollection!2!(self: gst.StreamCollection; `object`: gst.Stream; p0: gobject.ParamSpec)!(self: ptr gst.StreamCollection00; `object`: ptr gst.Stream00; p0: ptr gobject.ParamSpec00)",
    "synced!gst.Clock!1!(self: gst.Clock; synced: bool)!(self: ptr gst.Clock00; synced: gboolean)",
    "child_added!gst.ChildProxy!2!(self: gst.ChildProxy; `object`: gobject.Object; name: cstring)!(self: ptr gst.ChildProxy00; `object`: ptr gobject.Object00; name: cstring)",
    "child_removed!gst.ChildProxy!2!(self: gst.ChildProxy; `object`: gobject.Object; name: cstring)!(self: ptr gst.ChildProxy00; `object`: ptr gobject.Object00; name: cstring)",
    "provider_hidden!gst.DeviceProvider!1!(self: gst.DeviceProvider; `object`: cstring)!(self: ptr gst.DeviceProvider00; `object`: cstring)",
    "provider_unhidden!gst.DeviceProvider!1!(self: gst.DeviceProvider; `object`: cstring)!(self: ptr gst.DeviceProvider00; `object`: cstring)",
    "message!gst.Bus!1!(self: gst.Bus; message: gst.Message)!(self: ptr gst.Bus00; message: ptr gst.Message00)",
    "sync_message!gst.Bus!1!(self: gst.Bus; message: gst.Message)!(self: ptr gst.Bus00; message: ptr gst.Message00)",
    "feature_added!gst.Registry!1!(self: gst.Registry; feature: gst.PluginFeature)!(self: ptr gst.Registry00; feature: ptr gst.PluginFeature00)",
    "plugin_added!gst.Registry!1!(self: gst.Registry; plugin: gst.Plugin)!(self: ptr gst.Registry00; plugin: ptr gst.Plugin00)",
    "samples_selected!gstbase.Aggregator!5!(self: gstbase.Aggregator; segment: gst.Segment; pts: uint64; dts: uint64; duration: uint64; info: gst.Structure = nil)!(self: ptr gstbase.Aggregator00; segment: ptr gst.Segment00; pts: uint64; dts: uint64; duration: uint64; info: ptr gst.Structure00)",
    "buffer_consumed!gstbase.AggregatorPad!1!(self: gstbase.AggregatorPad; `object`: gst.Buffer)!(self: ptr gstbase.AggregatorPad00; `object`: ptr gst.Buffer00)",
    "new_preroll!gstapp.AppSink!0!(self: gstapp.AppSink): gst.FlowReturn!(self: ptr gstapp.AppSink00): gst.FlowReturn",
    "new_sample!gstapp.AppSink!0!(self: gstapp.AppSink): gst.FlowReturn!(self: ptr gstapp.AppSink00): gst.FlowReturn",
    "pull_preroll!gstapp.AppSink!0!(self: gstapp.AppSink): gst.Sample!(self: ptr gstapp.AppSink00): gst.Sample00",
    "pull_sample!gstapp.AppSink!0!(self: gstapp.AppSink): gst.Sample!(self: ptr gstapp.AppSink00): gst.Sample00",
    "try_pull_preroll!gstapp.AppSink!1!(self: gstapp.AppSink; timeout: uint64): gst.Sample!(self: ptr gstapp.AppSink00; timeout: uint64): gst.Sample00",
    "try_pull_sample!gstapp.AppSink!1!(self: gstapp.AppSink; timeout: uint64): gst.Sample!(self: ptr gstapp.AppSink00; timeout: uint64): gst.Sample00",
    "end_of_stream!gstapp.AppSrc!0!(self: gstapp.AppSrc): gst.FlowReturn!(self: ptr gstapp.AppSrc00): gst.FlowReturn",
    "need_data!gstapp.AppSrc!1!(self: gstapp.AppSrc; length: int)!(self: ptr gstapp.AppSrc00; length: uint32)",
    "push_buffer!gstapp.AppSrc!1!(self: gstapp.AppSrc; buffer: gst.Buffer): gst.FlowReturn!(self: ptr gstapp.AppSrc00; buffer: ptr gst.Buffer00): gst.FlowReturn",
    "push_buffer_list!gstapp.AppSrc!1!(self: gstapp.AppSrc; bufferList: gst.BufferList): gst.FlowReturn!(self: ptr gstapp.AppSrc00; bufferList: ptr gst.BufferList00): gst.FlowReturn",
    "push_sample!gstapp.AppSrc!1!(self: gstapp.AppSrc; sample: gst.Sample): gst.FlowReturn!(self: ptr gstapp.AppSrc00; sample: ptr gst.Sample00): gst.FlowReturn",
    "seek_data!gstapp.AppSrc!1!(self: gstapp.AppSrc; offset: uint64): bool!(self: ptr gstapp.AppSrc00; offset: uint64): gboolean",
    "value_added!gstcontroller.TimedValueControlSource!1!(self: gstcontroller.TimedValueControlSource; timedValue: gstcontroller.ControlPoint)!(self: ptr gstcontroller.TimedValueControlSource00; timedValue: ptr gstcontroller.ControlPoint00)",
    "value_changed!gstcontroller.TimedValueControlSource!1!(self: gstcontroller.TimedValueControlSource; timedValue: gstcontroller.ControlPoint)!(self: ptr gstcontroller.TimedValueControlSource00; timedValue: ptr gstcontroller.ControlPoint00)",
    "value_removed!gstcontroller.TimedValueControlSource!1!(self: gstcontroller.TimedValueControlSource; timedValue: gstcontroller.ControlPoint)!(self: ptr gstcontroller.TimedValueControlSource00; timedValue: ptr gstcontroller.ControlPoint00)",
    "create_context!gstgl.GLDisplay!1!(self: gstgl.GLDisplay; context: gstgl.GLContext): GLContext!(self: ptr gstgl.GLDisplay00; context: ptr gstgl.GLContext00): GLContext00",
    "key_event!gstgl.GLWindow!2!(self: gstgl.GLWindow; id: cstring; key: cstring)!(self: ptr gstgl.GLWindow00; id: cstring; key: cstring)",
    "mouse_event!gstgl.GLWindow!4!(self: gstgl.GLWindow; id: cstring; button: int; x: cdouble; y: cdouble)!(self: ptr gstgl.GLWindow00; id: cstring; button: int32; x: cdouble; y: cdouble)",
    "scroll_event!gstgl.GLWindow!4!(self: gstgl.GLWindow; x: cdouble; y: cdouble; deltaX: cdouble; deltaY: cdouble)!(self: ptr gstgl.GLWindow00; x: cdouble; y: cdouble; deltaX: cdouble; deltaY: cdouble)",
    "send!gstrtsp.RTSPExtension!2!(self: gstrtsp.RTSPExtension; `object`: pointer; p0: pointer): RTSPResult!(self: ptr gstrtsp.RTSPExtension00; `object`: pointer; p0: pointer): RTSPResult",
    "value_changed!gstvideo.ColorBalanceChannel!1!(self: gstvideo.ColorBalanceChannel; value: int)!(self: ptr gstvideo.ColorBalanceChannel00; value: int32)",
    "value_changed!gstvideo.ColorBalance!2!(self: gstvideo.ColorBalance; channel: gstvideo.ColorBalanceChannel; value: int)!(self: ptr gstvideo.ColorBalance00; channel: ptr gstvideo.ColorBalanceChannel00; value: int32)",
    "new_preroll!gstapp.AppSink!0!(self: gstapp.AppSink): gst.FlowReturn!(self: ptr gstapp.AppSink00): gst.FlowReturn",
    "new_sample!gstapp.AppSink!0!(self: gstapp.AppSink): gst.FlowReturn!(self: ptr gstapp.AppSink00): gst.FlowReturn",
    "pull_preroll!gstapp.AppSink!0!(self: gstapp.AppSink): gst.Sample!(self: ptr gstapp.AppSink00): gst.Sample00",
    "pull_sample!gstapp.AppSink!0!(self: gstapp.AppSink): gst.Sample!(self: ptr gstapp.AppSink00): gst.Sample00",
    "try_pull_preroll!gstapp.AppSink!1!(self: gstapp.AppSink; timeout: uint64): gst.Sample!(self: ptr gstapp.AppSink00; timeout: uint64): gst.Sample00",
    "try_pull_sample!gstapp.AppSink!1!(self: gstapp.AppSink; timeout: uint64): gst.Sample!(self: ptr gstapp.AppSink00; timeout: uint64): gst.Sample00",
    "end_of_stream!gstapp.AppSrc!0!(self: gstapp.AppSrc): gst.FlowReturn!(self: ptr gstapp.AppSrc00): gst.FlowReturn",
    "need_data!gstapp.AppSrc!1!(self: gstapp.AppSrc; length: int)!(self: ptr gstapp.AppSrc00; length: uint32)",
    "push_buffer!gstapp.AppSrc!1!(self: gstapp.AppSrc; buffer: gst.Buffer): gst.FlowReturn!(self: ptr gstapp.AppSrc00; buffer: ptr gst.Buffer00): gst.FlowReturn",
    "push_buffer_list!gstapp.AppSrc!1!(self: gstapp.AppSrc; bufferList: gst.BufferList): gst.FlowReturn!(self: ptr gstapp.AppSrc00; bufferList: ptr gst.BufferList00): gst.FlowReturn",
    "push_sample!gstapp.AppSrc!1!(self: gstapp.AppSrc; sample: gst.Sample): gst.FlowReturn!(self: ptr gstapp.AppSrc00; sample: ptr gst.Sample00): gst.FlowReturn",
    "seek_data!gstapp.AppSrc!1!(self: gstapp.AppSrc; offset: uint64): bool!(self: ptr gstapp.AppSrc00; offset: uint64): gboolean",
    "discovered!gstpbutils.Discoverer!2!(self: gstpbutils.Discoverer; info: gstpbutils.DiscovererInfo; error: ptr glib.Error)!(self: ptr gstpbutils.Discoverer00; info: ptr gstpbutils.DiscovererInfo00; error: ptr glib.Error)",
    "source_setup!gstpbutils.Discoverer!1!(self: gstpbutils.Discoverer; source: gst.Element)!(self: ptr gstpbutils.Discoverer00; source: ptr gst.Element00)",
  ]
